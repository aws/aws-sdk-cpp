cmake_minimum_required(VERSION 2.6)
set(PROJECT_NAME "aws-cpp-sdk-queues")
set(PROJECT_STRING    "${PROJECT_NAME}_${PROJECT_VERSION}")
set(PROJECT_DESCRIPTION "C++ interface for AWS Queues")
set(PROJECT_TARNAME   "${PROJECT_NAME}-${PROJECT_VERSION}")
set(PROJECT_LIBS "")
list(APPEND PROJECT_LIBS "AWS::aws-cpp-sdk-core")
list(APPEND PROJECT_LIBS "AWS::aws-cpp-sdk-sqs")

cmake_policy(SET CMP0048 NEW)
cmake_policy(SET CMP0054 NEW)
cmake_policy(SET CMP0056 NEW)

project("${PROJECT_NAME}" VERSION "${PROJECT_VERSION}" LANGUAGES CXX)

file(GLOB AWS_QUEUES_HEADERS
    "include/aws/queues/*.h"
)

file(GLOB AWS_SQS_QUEUES_HEADERS
    "include/aws/queues/sqs/*.h"
)

file(GLOB AWS_SQS_QUEUES_SOURCE
      "source/sqs/*.cpp"
)

if(MSVC)
    source_group("Header Files\\aws\\queues" FILES ${AWS_QUEUES_HEADERS})
    source_group("Header Files\\aws\\queues\\sqs" FILES ${AWS_SQS_QUEUES_HEADERS})

    source_group("Source Files\\sqs" FILES ${AWS_SQS_QUEUES_SOURCE})
endif()

file(GLOB QUEUES_SRC
  ${AWS_QUEUES_HEADERS}
  ${AWS_SQS_QUEUES_HEADERS}
  ${AWS_SQS_QUEUES_SOURCE}
)

set(QUEUES_INCLUDES
    "${CMAKE_CURRENT_SOURCE_DIR}/include/"
)

include_directories(${QUEUES_INCLUDES})

if(USE_WINDOWS_DLL_SEMANTICS AND BUILD_SHARED_LIBS)
    add_definitions("-DAWS_QUEUES_EXPORTS")
endif()

add_library(${PROJECT_NAME} ${LIBTYPE} ${QUEUES_SRC})

target_include_directories(${PROJECT_NAME} PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:include>)
target_link_libraries(${PROJECT_NAME} ${PROJECT_LIBS})

configure_file("${CMAKE_SOURCE_DIR}/toolchains/pkg-config.pc.in" "${PROJECT_NAME}.pc" @ONLY)

if(SIMPLE_INSTALL)
    install (TARGETS ${PROJECT_NAME}
             EXPORT "${PROJECT_NAME}-targets"
             ARCHIVE DESTINATION ${ARCHIVE_DIRECTORY}
             LIBRARY DESTINATION ${LIBRARY_DIRECTORY}
             RUNTIME DESTINATION ${BINARY_DIRECTORY})
    if (BUILD_SHARED_LIBS)
        install(
            FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc"
            DESTINATION ${LIBRARY_DIRECTORY}/pkgconfig)
    endif()

else()
    if(PLATFORM_CUSTOM)
        install_custom_library(${PROJECT_NAME})
    else()
        install (TARGETS ${PROJECT_NAME}
                 EXPORT "${PROJECT_NAME}-targets"
                 ARCHIVE DESTINATION ${ARCHIVE_DIRECTORY}/${SDK_INSTALL_BINARY_PREFIX}/${PLATFORM_INSTALL_QUALIFIER}/\${CMAKE_INSTALL_CONFIG_NAME}
                 LIBRARY DESTINATION ${LIBRARY_DIRECTORY}/${SDK_INSTALL_BINARY_PREFIX}/${PLATFORM_INSTALL_QUALIFIER}/\${CMAKE_INSTALL_CONFIG_NAME}
                 RUNTIME DESTINATION ${BINARY_DIRECTORY}/${SDK_INSTALL_BINARY_PREFIX}/${PLATFORM_INSTALL_QUALIFIER}/\${CMAKE_INSTALL_CONFIG_NAME})
    endif()
endif()

install (FILES ${AWS_QUEUES_HEADERS} DESTINATION ${INCLUDE_DIRECTORY}/aws/queues)
install (FILES ${AWS_SQS_QUEUES_HEADERS} DESTINATION ${INCLUDE_DIRECTORY}/aws/queues/sqs)

include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake"
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY AnyNewerVersion
)

export(EXPORT "${PROJECT_NAME}-targets"
    FILE "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-targets.cmake"
    NAMESPACE AWS::
)

configure_file(
    "${CMAKE_SOURCE_DIR}/toolchains/cmakeProjectConfig.cmake"
    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
    @ONLY)

set(ConfigPackageLocation "${LIBRARY_DIRECTORY}/cmake/${PROJECT_NAME}")
install(EXPORT "${PROJECT_NAME}-targets"
    FILE "${PROJECT_NAME}-targets.cmake"
    NAMESPACE AWS::
    DESTINATION ${ConfigPackageLocation}
)

install(
    FILES
      "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
      "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake"
    DESTINATION
      ${ConfigPackageLocation}
    COMPONENT
      Devel)
