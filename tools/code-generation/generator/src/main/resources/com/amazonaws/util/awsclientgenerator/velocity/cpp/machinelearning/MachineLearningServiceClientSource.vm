#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/common/MacroParseOverrideOrDefault.vm")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#set($metadata = $serviceModel.metadata)
#set($className = "${metadata.classNamePrefix}Client")
#set($serviceNamespace = $metadata.namespace)
\#include <aws/core/utils/Outcome.h>
\#include <aws/core/auth/AWSAuthSigner.h>
\#include <aws/core/client/CoreErrors.h>
\#include <aws/core/client/RetryStrategy.h>
\#include <aws/core/http/HttpClient.h>
\#include <aws/core/http/HttpResponse.h>
\#include <aws/core/http/HttpClientFactory.h>
\#include <aws/core/auth/AWSCredentialsProviderChain.h>
\#include <aws/core/utils/json/JsonSerializer.h>
\#include <aws/core/utils/memory/stl/AWSStringStream.h>
\#include <aws/core/utils/threading/Executor.h>
\#include <aws/core/utils/logging/LogMacros.h>
#if($serviceModel.endpointRules)
\#include <aws/core/utils/logging/ErrorMacros.h>
#end
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientSourceHeaders.vm")

using namespace Aws;
using namespace Aws::Auth;
using namespace Aws::Client;
using namespace Aws::${metadata.namespace};
using namespace Aws::${metadata.namespace}::Model;
using namespace Aws::Http;
using namespace Aws::Utils::Json;
using namespace smithy::components::tracing;
#if($serviceModel.endpointRules)
using ResolveEndpointOutcome = Aws::Endpoint::ResolveEndpointOutcome;
#end


#if(!$onlyGeneratedOperations)
const char* ${className}::SERVICE_NAME = "${metadata.signingName}";
const char* ${className}::ALLOCATION_TAG = "${className}";

#parseOverrideOrDefault( "ServiceClientSourceInit_template" "com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientSourceInit.vm")
#end

#foreach($operation in $serviceModel.operations)
${operation.name}Outcome ${className}::${operation.name}(const ${operation.request.shape.name}& request) const
{
  AWS_OPERATION_GUARD(${operation.name});
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/common/ServiceClientOperationRequestRequiredMemberValidate.vm")
  auto tracer = m_telemetryProvider->getTracer(this->GetServiceClientName(), {});
  auto meter = m_telemetryProvider->getMeter(this->GetServiceClientName(), {});
  AWS_OPERATION_CHECK_PTR(meter, ${operation.name}, CoreErrors, CoreErrors::NOT_INITIALIZED);
  auto span = tracer->CreateSpan(Aws::String(this->GetServiceClientName()) + "." + request.GetServiceRequestName(),
    {{ TracingUtils::SMITHY_METHOD_DIMENSION, request.GetServiceRequestName() }, { TracingUtils::SMITHY_SERVICE_DIMENSION, this->GetServiceClientName() }, { TracingUtils::SMITHY_SYSTEM_DIMENSION, TracingUtils::SMITHY_METHOD_AWS_VALUE }},
    smithy::components::tracing::SpanKind::CLIENT);
  return TracingUtils::MakeCallWithTiming<${operation.name}Outcome>(
    [&]() -> ${operation.name}Outcome{
#if($serviceModel.endpointRules)
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/common/ServiceClientOperationEndpointPrepareCommonBody.vm")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/common/UriRequestQueryParams.vm")
      return ${operation.name}Outcome(MakeRequest(request, endpointResolutionOutcome.GetResult(), Aws::Http::HttpMethod::HTTP_${operation.http.method}));
#else##-#if($serviceModel.endpointRules)
#if($operation.name != "Predict")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/common/ServiceClientOperationEndpointPrepareCommonBody.vm")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/common/UriRequestQueryParams.vm")
      return ${operation.name}Outcome(MakeRequest(uri, request, Aws::Http::HttpMethod::HTTP_${operation.http.method}));
#else
      return ${operation.name}Outcome(MakeRequest(request.GetPredictEndpoint(), request, Aws::Http::HttpMethod::HTTP_${operation.http.method}));
#end
#end##-#if($serviceModel.endpointRules)
    },
    TracingUtils::SMITHY_CLIENT_DURATION_METRIC,
    *meter,
    {{TracingUtils::SMITHY_METHOD_DIMENSION, request.GetServiceRequestName()}, {TracingUtils::SMITHY_SERVICE_DIMENSION, this->GetServiceClientName()}});
}

#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/common/operation/withrequest/OperationOutcomeCallable.vm")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/common/operation/withrequest/OperationAsync.vm")


#end
