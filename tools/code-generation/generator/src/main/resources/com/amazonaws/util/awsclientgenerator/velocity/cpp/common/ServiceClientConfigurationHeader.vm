#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#set($metadata = $serviceModel.metadata)
#set($rootNamespace = $serviceModel.namespace)
#set($serviceNamespace = $metadata.namespace)
#if($metadata.hasEndpointDiscoveryTrait)
#set($EndpointDiscoveryTraitSupported = "/*EndpointDiscoverySupported*/true")
#else
#set($EndpointDiscoveryTraitSupported = "/*EndpointDiscoverySupported*/false")
#end
#pragma once

\#include <aws/${metadata.projectName}/${metadata.classNamePrefix}_EXPORTS.h>
#if($serviceModel.metadata.serviceId == "S3")
\#include <aws/${metadata.projectName}/S3ExpressIdentityProvider.h>
#end
\#include <aws/core/client/GenericClientConfiguration.h>
#if($serviceModel.metadata.serviceId == "S3" || $serviceModel.metadata.serviceId == "S3 Control")
\#include <aws/core/auth/signer/AWSAuthV4Signer.h>
#end
#if($serviceNamespace == "S3Crt")
\#include <aws/crt/io/Bootstrap.h>
\#include <aws/crt/io/TlsOptions.h>
\#include <aws/io/retry_strategy.h>
#end


namespace ${rootNamespace}
{
    namespace ${serviceNamespace}
    {
#if($serviceModel.metadata.serviceId == "S3")
        enum class US_EAST_1_REGIONAL_ENDPOINT_OPTION
        {
            NOT_SET,
            LEGACY,   //stands for using global endpoint for us-east-1,
            REGIONAL //stands for using regional endpoint for us-east-1
        };

#end
        struct ${exportValue} ${metadata.classNamePrefix}ClientConfiguration : public Aws::Client::GenericClientConfiguration
        {
            using BaseClientConfigClass = Aws::Client::GenericClientConfiguration;
#if($metadata.hasEndpointDiscoveryTrait)
            static const bool EndpointDiscoverySupported = true;
#if($metadata.requireEndpointDiscovery)
            static const bool EndpointDiscoveryRequired = true;
#else
            static const bool EndpointDiscoveryRequired = false;
#end
#end

#if($metadata.hasEndpointDiscoveryTrait)
            ${metadata.classNamePrefix}ClientConfiguration(const ${metadata.classNamePrefix}ClientConfiguration& other)
                : Aws::Client::GenericClientConfiguration(other),
                  enableEndpointDiscovery(BaseClientConfigClass::enableEndpointDiscovery)
            {
            }

            ${metadata.classNamePrefix}ClientConfiguration(${metadata.classNamePrefix}ClientConfiguration&& other) noexcept
                : Aws::Client::GenericClientConfiguration(std::move(other)),
                  enableEndpointDiscovery(BaseClientConfigClass::enableEndpointDiscovery)
            {
            }

            ${metadata.classNamePrefix}ClientConfiguration& operator=(const ${metadata.classNamePrefix}ClientConfiguration& other)
            {
                if (this == &other)
                    return *this;
                Aws::Client::GenericClientConfiguration::operator =(other);
                return *this;
            }

            ${metadata.classNamePrefix}ClientConfiguration& operator=(${metadata.classNamePrefix}ClientConfiguration&& other) noexcept
            {
                if (this == &other)
                    return *this;
                Aws::Client::GenericClientConfiguration::operator =(std::move(other));
                return *this;
            }

#end
            ${metadata.classNamePrefix}ClientConfiguration(const Client::ClientConfigurationInitValues &configuration = {});

            /**
            * Create a configuration based on settings in the aws configuration file for the given profile name.
            * The configuration file location can be set via the environment variable AWS_CONFIG_FILE
            * @param profileName the aws profile name.
            * @param shouldDisableIMDS whether or not to disable IMDS calls.
            */
            ${metadata.classNamePrefix}ClientConfiguration(const char* profileName, bool shouldDisableIMDS = false);

            /**
            * Create a configuration with a predefined smart defaults
            * @param useSmartDefaults, required to differentiate c-tors
            * @param defaultMode, default mode to use
            * @param shouldDisableIMDS whether or not to disable IMDS calls.
            */
            ${metadata.classNamePrefix}ClientConfiguration(bool useSmartDefaults, const char* defaultMode = "legacy", bool shouldDisableIMDS = false);

            /**
            * Converting constructors for compatibility with a legacy code
            */
#set($classNamePrefix = $metadata.classNamePrefix)
#set($clsPrefixWSpace = $classNamePrefix.replaceAll(".", " "))
#set($earlyClose = $serviceModel.metadata.serviceId != "S3")
            ${classNamePrefix}ClientConfiguration(const Client::ClientConfiguration& config#if($earlyClose));#else,
#end
#if($serviceModel.metadata.serviceId == "S3")
            ${clsPrefixWSpace}                    Client::AWSAuthV4Signer::PayloadSigningPolicy iPayloadSigningPolicy = Client::AWSAuthV4Signer::PayloadSigningPolicy::Never,
            ${clsPrefixWSpace}                    bool iUseVirtualAddressing = true,
            ${clsPrefixWSpace}                    US_EAST_1_REGIONAL_ENDPOINT_OPTION iUseUSEast1RegionalEndPointOption = US_EAST_1_REGIONAL_ENDPOINT_OPTION::NOT_SET);
#end

#if($serviceModel.metadata.serviceId == "S3")
            bool useVirtualAddressing = true;
            US_EAST_1_REGIONAL_ENDPOINT_OPTION useUSEast1RegionalEndPointOption = US_EAST_1_REGIONAL_ENDPOINT_OPTION::NOT_SET;
            bool disableMultiRegionAccessPoints = false;
#end
#if($serviceModel.metadata.serviceId == "S3" || $serviceModel.metadata.serviceId == "S3 Control")
            bool useArnRegion = false;
#if($metadata.signatureVersion.equals("s3") || $metadata.signatureVersion.equals("s3v4"))##Typically should be S3Control only
            Client::AWSAuthV4Signer::PayloadSigningPolicy payloadSigningPolicy = Client::AWSAuthV4Signer::PayloadSigningPolicy::RequestDependent;
#else
            Client::AWSAuthV4Signer::PayloadSigningPolicy payloadSigningPolicy = Client::AWSAuthV4Signer::PayloadSigningPolicy::Never;
#end
#end
#if($serviceModel.metadata.serviceId == "S3")
            bool disableS3ExpressAuth = false;
            using IdentityProviderSupplier = std::function<std::shared_ptr<S3ExpressIdentityProvider> (const ${metadata.classNamePrefix}Client &)>;
            IdentityProviderSupplier identityProviderSupplier = [](const ${metadata.classNamePrefix}Client &client) -> std::shared_ptr<S3ExpressIdentityProvider> {
                return Aws::MakeShared<DefaultS3ExpressIdentityProvider>("${metadata.classNamePrefix}ClientConfiguration", client);
            };
#end
#if($metadata.hasEndpointDiscoveryTrait)

            /**
             * Enable endpoint discovery
             * For some services to dynamically set up their endpoints for different requests.
             * By default, service clients will decide if endpoint discovery is enabled or not.
             * If disabled, regional or overridden endpoint will be used instead.
             * If a request requires endpoint discovery, but it was disabled then the request will never succeed.
             * A boolean value is either true of false, use Optional here to have an instance does not contain a value,
             * such that SDK will decide the default behavior as stated before, if no value specified.
#if($metadata.requireEndpointDiscovery)
             * $serviceModel.metadata.serviceId service client requires endpoint discovery. The default value for this setting is Enabled.
#else
             * $serviceModel.metadata.serviceId service client does not require endpoint discovery. The default value for this setting is Disabled.
#end
             */
            Aws::Crt::Optional<bool>& enableEndpointDiscovery;

#end
#if($serviceModel.endpointRuleSetModel.parameters.containsKey("AccountId"))
            /**
             * $serviceModel.endpointRuleSetModel.parameters["AccountId"].documentation
             */
            Aws::String accountId;
#end
#if($serviceModel.endpointRuleSetModel.parameters.containsKey("AccountIdEndpointMode"))
            /**
             * $serviceModel.endpointRuleSetModel.parameters["AccountIdEndpointMode"].documentation
             */
            Aws::String accountIdEndpointMode = "preferred";
#end
#if($serviceNamespace == "S3Crt")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/s3/s3-crt/S3CrtClientConfigHeader.vm")
#end
        private:
            void Load${serviceNamespace}SpecificConfig(const Aws::String& profileName);
        };
    }
}