#set($clientConfiguration = ${serviceNamespace} + "::" + ${metadata.classNamePrefix} + "ClientConfiguration")
#if($serviceModel.hasOnlyBearerAuth())
##BEARER TOKEN AUTH PROVIDER C-TOR
${className}::${className}(const Aws::Auth::BearerTokenAuthSignerProvider& bearerTokenProvider,
                           std::shared_ptr<${metadata.classNamePrefix}EndpointProviderBase> endpointProvider,
                           const ${clientConfiguration}& clientConfiguration) :
    AwsSmithyClientT(clientConfiguration,
      GetServiceName(),
      "${metadata.serviceId}",
      Aws::Http::CreateHttpClient(clientConfiguration),
      Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG),
      endpointProvider ? endpointProvider : Aws::MakeShared<${metadata.classNamePrefix}EndpointProvider>(ALLOCATION_TAG),
      Aws::MakeShared<smithy::${AuthSchemeResolver}<>>(ALLOCATION_TAG),
      {
#foreach($entry in $AuthSchemeMapEntries)
          {${entry}{Aws::MakeShared<smithy::AwsBearerTokenIdentityResolver>(ALLOCATION_TAG, bearerTokenProvider), GetServiceName(), clientConfiguration.region}},
#end
      })
{
}

${className}::${className}(const Aws::Auth::BearerTokenAuthSignerProvider& bearerTokenProvider,
                           const Aws::Client::ClientConfiguration& clientConfiguration) :
    AwsSmithyClientT(clientConfiguration,
      GetServiceName(),
      "${metadata.serviceId}",
      Aws::Http::CreateHttpClient(clientConfiguration),
      Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG),
      Aws::MakeShared<${metadata.classNamePrefix}EndpointProvider>(ALLOCATION_TAG),
      Aws::MakeShared<smithy::${AuthSchemeResolver}<>>(ALLOCATION_TAG),
      {
#foreach($entry in $AuthSchemeMapEntries)
          {${entry}{Aws::MakeShared<smithy::AwsBearerTokenIdentityResolver>(ALLOCATION_TAG, bearerTokenProvider), GetServiceName(), clientConfiguration.region}},
#end
      })
{
}
## END OF BEARER TOKEN AUTH PROVIDER C-TOR


#else
${className}::${className}(const ${clientConfiguration}& clientConfiguration,
                           std::shared_ptr<${metadata.classNamePrefix}EndpointProviderBase> endpointProvider) :
    AwsSmithyClientT(clientConfiguration,
        GetServiceName(),
        "${metadata.serviceId}",
        Aws::Http::CreateHttpClient(clientConfiguration),
        Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG),
        endpointProvider ? endpointProvider : Aws::MakeShared<${metadata.classNamePrefix}EndpointProvider>(ALLOCATION_TAG),
        Aws::MakeShared<smithy::${AuthSchemeResolver}<>>(ALLOCATION_TAG),
        {
#foreach($entry in $AuthSchemeMapEntries)
#if($serviceModel.metadata.serviceId == "S3")
            {${entry}{Aws::MakeShared<DefaultS3ExpressIdentityResolver>(ALLOCATION_TAG, *this), GetServiceName(), clientConfiguration.region}},
#else
            {${entry}{GetServiceName(), clientConfiguration.region}},
#end
#end
        })
{}

${className}::${className}(const AWSCredentials& credentials,
                           std::shared_ptr<${metadata.classNamePrefix}EndpointProviderBase> endpointProvider,
                           const ${clientConfiguration}& clientConfiguration) :
    AwsSmithyClientT(clientConfiguration,
        GetServiceName(),
        "${metadata.serviceId}",
        Aws::Http::CreateHttpClient(clientConfiguration),
        Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG),
        endpointProvider ? endpointProvider : Aws::MakeShared<${metadata.classNamePrefix}EndpointProvider>(ALLOCATION_TAG),
        Aws::MakeShared<smithy::${AuthSchemeResolver}<>>(ALLOCATION_TAG),
        {
#foreach($entry in $AuthSchemeMapEntries)
            {${entry}{Aws::MakeShared<smithy::SimpleAwsCredentialIdentityResolver>(ALLOCATION_TAG, credentials), GetServiceName(), clientConfiguration.region}},
#end
        })
{}

${className}::${className}(const std::shared_ptr<AWSCredentialsProvider>& credentialsProvider,
                           std::shared_ptr<${metadata.classNamePrefix}EndpointProviderBase> endpointProvider,
                           const ${clientConfiguration}& clientConfiguration) :
    AwsSmithyClientT(clientConfiguration,
        GetServiceName(),
        "${metadata.serviceId}",
        Aws::Http::CreateHttpClient(clientConfiguration),
        Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG),
        endpointProvider ? endpointProvider : Aws::MakeShared<${metadata.classNamePrefix}EndpointProvider>(ALLOCATION_TAG),
        Aws::MakeShared<smithy::${AuthSchemeResolver}<>>(ALLOCATION_TAG),
        {
#foreach($entry in $AuthSchemeMapEntries)
#if($serviceModel.metadata.serviceId == "S3")
            {${entry}{ Aws::MakeShared<DefaultS3ExpressIdentityResolver>(ALLOCATION_TAG,  *this, credentialsProvider), GetServiceName(), clientConfiguration.region}}
#else
            {${entry}{ Aws::MakeShared<smithy::AwsCredentialsProviderIdentityResolver>(ALLOCATION_TAG, credentialsProvider), GetServiceName(), clientConfiguration.region}}
#end
#end
        })
{}

/* Legacy constructors due deprecation */
#if($serviceModel.metadata.serviceId == "S3")
${className}::${className}(const Client::ClientConfiguration& clientConfiguration,
        Aws::Client::AWSAuthV4Signer::PayloadSigningPolicy signPayloads /*= Never*/,
        bool useVirtualAddressing /*= true*/,
        Aws::S3::US_EAST_1_REGIONAL_ENDPOINT_OPTION USEast1RegionalEndPointOption):
    AwsSmithyClientT(clientConfiguration,
      GetServiceName(),
      "${metadata.serviceId}",
      Aws::Http::CreateHttpClient(clientConfiguration),
      Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG),
      Aws::MakeShared<${metadata.classNamePrefix}EndpointProvider>(ALLOCATION_TAG),
      Aws::MakeShared<smithy::${AuthSchemeResolver}<>>(ALLOCATION_TAG),
      {
        {smithy::SigV4AuthSchemeOption::sigV4AuthSchemeOption.schemeId, smithy::SigV4AuthScheme(Aws::MakeShared<DefaultS3ExpressIdentityResolver>(ALLOCATION_TAG, *this), GetServiceName(), clientConfiguration.region, 
            Aws::MakeShared<smithy::S3ExpressSigner<smithy::AwsSigV4Signer>>( ALLOCATION_TAG, GetServiceName(), clientConfiguration.region, signPayloads))},
      }),
      m_clientConfiguration(clientConfiguration, signPayloads, useVirtualAddressing, USEast1RegionalEndPointOption)
{
}

${className}::${className}(
        const Aws::Auth::AWSCredentials& credentials,
        const Client::ClientConfiguration& clientConfiguration,
        Aws::Client::AWSAuthV4Signer::PayloadSigningPolicy signPayloads /*= Never*/,
        bool useVirtualAddressing /*= true*/,
        Aws::S3::US_EAST_1_REGIONAL_ENDPOINT_OPTION USEast1RegionalEndPointOption):
    AwsSmithyClientT(clientConfiguration,
      GetServiceName(),
      "${metadata.serviceId}",
      Aws::Http::CreateHttpClient(clientConfiguration),
      Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG),
      Aws::MakeShared<${metadata.classNamePrefix}EndpointProvider>(ALLOCATION_TAG),
      Aws::MakeShared<smithy::${AuthSchemeResolver}<>>(ALLOCATION_TAG),
      {
        {smithy::SigV4AuthSchemeOption::sigV4AuthSchemeOption.schemeId, smithy::SigV4AuthScheme(Aws::MakeShared<DefaultS3ExpressIdentityResolver>(ALLOCATION_TAG, *this), GetServiceName(), clientConfiguration.region, 
            Aws::MakeShared<smithy::S3ExpressSigner<smithy::AwsSigV4Signer>>( ALLOCATION_TAG, GetServiceName(), clientConfiguration.region, signPayloads))},
      }),
      m_clientConfiguration(clientConfiguration, signPayloads, useVirtualAddressing, USEast1RegionalEndPointOption)
{
}

${className}::${className}(
        const std::shared_ptr<Aws::Auth::AWSCredentialsProvider>& credentialsProvider,
        const Client::ClientConfiguration& clientConfiguration,
        Aws::Client::AWSAuthV4Signer::PayloadSigningPolicy signPayloads /*= Never*/,
        bool useVirtualAddressing /*= true*/,
        Aws::S3::US_EAST_1_REGIONAL_ENDPOINT_OPTION USEast1RegionalEndPointOption):
    AwsSmithyClientT(clientConfiguration,
      GetServiceName(),
      "${metadata.serviceId}",
      Aws::Http::CreateHttpClient(clientConfiguration),
      Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG),
      Aws::MakeShared<${metadata.classNamePrefix}EndpointProvider>(ALLOCATION_TAG),
      Aws::MakeShared<smithy::${AuthSchemeResolver}<>>(ALLOCATION_TAG),
      {
        {smithy::SigV4AuthSchemeOption::sigV4AuthSchemeOption.schemeId, smithy::SigV4AuthScheme(Aws::MakeShared<DefaultS3ExpressIdentityResolver>(ALLOCATION_TAG, *this), GetServiceName(), clientConfiguration.region, 
            Aws::MakeShared<smithy::S3ExpressSigner<smithy::AwsSigV4Signer>>( ALLOCATION_TAG, GetServiceName(), clientConfiguration.region, signPayloads))},
      }),
      m_clientConfiguration(clientConfiguration, signPayloads, useVirtualAddressing, USEast1RegionalEndPointOption)
{
}
#else
${className}::${className}(const Client::ClientConfiguration& clientConfiguration) :
    AwsSmithyClientT(clientConfiguration,
      GetServiceName(),
      "${metadata.serviceId}",
      Aws::Http::CreateHttpClient(clientConfiguration),
      Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG),
      Aws::MakeShared<${metadata.classNamePrefix}EndpointProvider>(ALLOCATION_TAG),
      Aws::MakeShared<smithy::${AuthSchemeResolver}<>>(ALLOCATION_TAG),
      {
#foreach($entry in $AuthSchemeMapEntries)
          {$entry{Aws::MakeShared<smithy::DefaultAwsCredentialIdentityResolver>(ALLOCATION_TAG), GetServiceName(), clientConfiguration.region}}
#end
      })
{}

${className}::${className}(const AWSCredentials& credentials,
                           const Client::ClientConfiguration& clientConfiguration) :
    AwsSmithyClientT(clientConfiguration,
        GetServiceName(),
        "${metadata.serviceId}",
        Aws::Http::CreateHttpClient(clientConfiguration),
        Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG),
        Aws::MakeShared<${metadata.classNamePrefix}EndpointProvider>(ALLOCATION_TAG),
        Aws::MakeShared<smithy::${AuthSchemeResolver}<>>(ALLOCATION_TAG),
        {
#foreach($entry in $AuthSchemeMapEntries)
          {$entry{Aws::MakeShared<smithy::SimpleAwsCredentialIdentityResolver>(ALLOCATION_TAG, credentials), GetServiceName(), clientConfiguration.region}}
#end
        })
{}

${className}::${className}(const std::shared_ptr<AWSCredentialsProvider>& credentialsProvider,
                           const Client::ClientConfiguration& clientConfiguration) :
    AwsSmithyClientT(clientConfiguration,
        GetServiceName(),
        "${metadata.serviceId}",
        Aws::Http::CreateHttpClient(clientConfiguration),
        Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG),
        Aws::MakeShared<${metadata.classNamePrefix}EndpointProvider>(ALLOCATION_TAG),
        Aws::MakeShared<smithy::${AuthSchemeResolver}<>>(ALLOCATION_TAG),
        {
#foreach($entry in $AuthSchemeMapEntries)
          {$entry{Aws::MakeShared<smithy::AwsCredentialsProviderIdentityResolver>(ALLOCATION_TAG, credentialsProvider), GetServiceName(), clientConfiguration.region}}
#end
        })
{}
#end
/* End of legacy constructors due deprecation */

${className}::~${className}()
{
  ShutdownSdkClient(this, -1);
}

std::shared_ptr<${metadata.classNamePrefix}EndpointProviderBase>& ${className}::accessEndpointProvider()
{
  return m_endpointProvider;
}

void ${className}::OverrideEndpoint(const Aws::String& endpoint)
{
    AWS_CHECK_PTR(SERVICE_NAME, m_endpointProvider);
    m_endpointProvider->OverrideEndpoint(endpoint);
}