#set($clientConfiguration = ${serviceNamespace} + "::" + ${metadata.classNamePrefix} + "ClientConfiguration")
${className}::${className}(const ${clientConfiguration}& clientConfiguration,
                           std::shared_ptr<${metadata.classNamePrefix}EndpointProviderBase> endpointProvider) :
    AwsSmithyClientT(clientConfiguration,
        GetServiceName(),
        "${metadata.serviceId}",
        Aws::Http::CreateHttpClient(clientConfiguration),
        Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG),
        endpointProvider ? endpointProvider : Aws::MakeShared<${metadata.classNamePrefix}EndpointProvider>(ALLOCATION_TAG),
        Aws::MakeShared<smithy::${AuthSchemeResolver}<>>(ALLOCATION_TAG),
        {
#foreach($entry in $AuthSchemeMapEntries)
            {${entry}{GetServiceName(), clientConfiguration.region}},
#end
        })
{}

${className}::${className}(const AWSCredentials& credentials,
                           std::shared_ptr<${metadata.classNamePrefix}EndpointProviderBase> endpointProvider,
                           const ${clientConfiguration}& clientConfiguration) :
    AwsSmithyClientT(clientConfiguration,
        GetServiceName(),
        "${metadata.serviceId}",
        Aws::Http::CreateHttpClient(clientConfiguration),
        Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG),
        endpointProvider ? endpointProvider : Aws::MakeShared<${metadata.classNamePrefix}EndpointProvider>(ALLOCATION_TAG),
        Aws::MakeShared<smithy::${AuthSchemeResolver}<>>(ALLOCATION_TAG),
        {
#foreach($entry in $AuthSchemeMapEntries)
            {${entry}{Aws::MakeShared<smithy::SimpleAwsCredentialIdentityResolver>(ALLOCATION_TAG, credentials), GetServiceName(), clientConfiguration.region}},
#end
        })
{}

${className}::${className}(const std::shared_ptr<AWSCredentialsProvider>& credentialsProvider,
                           std::shared_ptr<${metadata.classNamePrefix}EndpointProviderBase> endpointProvider,
                           const ${clientConfiguration}& clientConfiguration) :
    AwsSmithyClientT(clientConfiguration,
        GetServiceName(),
        "${metadata.serviceId}",
        Aws::Http::CreateHttpClient(clientConfiguration),
        Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG),
        endpointProvider ? endpointProvider : Aws::MakeShared<${metadata.classNamePrefix}EndpointProvider>(ALLOCATION_TAG),
        Aws::MakeShared<smithy::${AuthSchemeResolver}<>>(ALLOCATION_TAG),
        {
#foreach($entry in $AuthSchemeMapEntries)
            {${entry}{ Aws::MakeShared<smithy::AwsCredentialsProviderIdentityResolver>(ALLOCATION_TAG, credentialsProvider), GetServiceName(), clientConfiguration.region}}
#end
        })
{}

/* Legacy constructors due deprecation */
${className}::${className}(const Client::ClientConfiguration& clientConfiguration) :
    AwsSmithyClientT(clientConfiguration,
      GetServiceName(),
      "${metadata.serviceId}",
      Aws::Http::CreateHttpClient(clientConfiguration),
      Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG),
      Aws::MakeShared<${metadata.classNamePrefix}EndpointProvider>(ALLOCATION_TAG),
      Aws::MakeShared<smithy::${AuthSchemeResolver}<>>(ALLOCATION_TAG),
      {
#foreach($entry in $AuthSchemeMapEntries)
          {$entry{Aws::MakeShared<smithy::DefaultAwsCredentialIdentityResolver>(ALLOCATION_TAG), GetServiceName(), clientConfiguration.region}}
#end
      })
{}

${className}::${className}(const AWSCredentials& credentials,
                           const Client::ClientConfiguration& clientConfiguration) :
    AwsSmithyClientT(clientConfiguration,
        GetServiceName(),
        "${metadata.serviceId}",
        Aws::Http::CreateHttpClient(clientConfiguration),
        Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG),
        Aws::MakeShared<${metadata.classNamePrefix}EndpointProvider>(ALLOCATION_TAG),
        Aws::MakeShared<smithy::${AuthSchemeResolver}<>>(ALLOCATION_TAG),
        {
#foreach($entry in $AuthSchemeMapEntries)
          {$entry{Aws::MakeShared<smithy::SimpleAwsCredentialIdentityResolver>(ALLOCATION_TAG, credentials), GetServiceName(), clientConfiguration.region}}
#end
        })
{}

${className}::${className}(const std::shared_ptr<AWSCredentialsProvider>& credentialsProvider,
                           const Client::ClientConfiguration& clientConfiguration) :
    AwsSmithyClientT(clientConfiguration,
        GetServiceName(),
        "${metadata.serviceId}",
        Aws::Http::CreateHttpClient(clientConfiguration),
        Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG),
        Aws::MakeShared<${metadata.classNamePrefix}EndpointProvider>(ALLOCATION_TAG),
        Aws::MakeShared<smithy::${AuthSchemeResolver}<>>(ALLOCATION_TAG),
        {
#foreach($entry in $AuthSchemeMapEntries)
          {$entry{Aws::MakeShared<smithy::AwsCredentialsProviderIdentityResolver>(ALLOCATION_TAG, credentialsProvider), GetServiceName(), clientConfiguration.region}}
#end
        })
{}
/* End of legacy constructors due deprecation */

${className}::~${className}()
{
  ShutdownSdkClient(this, -1);
}

std::shared_ptr<${metadata.classNamePrefix}EndpointProviderBase>& ${className}::accessEndpointProvider()
{
  return m_endpointProvider;
}

void ${className}::OverrideEndpoint(const Aws::String& endpoint)
{
    AWS_CHECK_PTR(SERVICE_NAME, m_endpointProvider);
    m_endpointProvider->OverrideEndpoint(endpoint);
}
