#set($additionalCtorArgs = {})
#if($signPayloadsOptional)
#if(!$serviceModel.endpointRules)
#set($signPayloads = ", Aws::Client::AWSAuthV4Signer::PayloadSigningPolicy signPayloads = Aws::Client::AWSAuthV4Signer::PayloadSigningPolicy::Never")
#set($addArgDummy = $additionalCtorArgs.put("signPayloads", "Aws::Client::AWSAuthV4Signer::PayloadSigningPolicy signPayloads = Aws::Client::AWSAuthV4Signer::PayloadSigningPolicy::Never"))
#end##-#if(!$serviceModel.endpointRules)
#else
#set($signPayloads = "")
#end
#if($virtualAddressingSupported)
#if(!$serviceModel.endpointRules)
    #set($virtualAddressing = ", bool useVirtualAddressing = true")
#set($addArgDummy = $additionalCtorArgs.put("useVirtualAddressing", "bool useVirtualAddressing = true"))
#end##-#if($serviceModel.endpointRules)
#else
    #set($virtualAddressing = "")
#end
#if(!$USEast1RegionalEndpointArgString)
#set($USEast1RegionalEndpointArgString = "")
#else
#if(!$serviceModel.endpointRules)
#set($addArgDummy = $additionalCtorArgs.put("USEast1RegionalEndpoint", $USEast1RegionalEndpointArgString.replace(", ", "")))
#end##-#if($serviceModel.endpointRules)
#end
#if($serviceNamespace == "S3Crt")
#set($clientConfigurationNamespace = $serviceNamespace)
#set($credentialProviderArg = ", const Aws::Auth::DefaultAWSCredentialsProviderChain& credentialsProvider = Aws::Auth::DefaultAWSCredentialsProviderChain()")
#set($addArgDummy = $additionalCtorArgs.put("additionalCredentialProvider", "const Aws::Auth::DefaultAWSCredentialsProviderChain& credentialsProvider = Aws::Auth::DefaultAWSCredentialsProviderChain()"))
#else
#set($clientConfigurationNamespace = "Client")
#set($credentialProviderArg = "")
#end
#set($clsWSpace = $className.replaceAll(".", " "))
#if($serviceModel.endpointRules)
#set($endpointsProviderDefaultCtorDummy = "nullptr")
#set($clientConfigurationCls = "Aws::" + ${serviceNamespace} + "::" + ${metadata.classNamePrefix} + "ClientConfiguration")
#else
#set($clientConfigurationCls = "Aws::" + ${clientConfigurationNamespace} + "::ClientConfiguration")
#end
#if($serviceModel.metadata.serviceId == "S3")
        /**
         * Copy constructor for a ${className}. Copies all members that do not reference self.
         * Recreates member that reference self.
         * @param rhs the source object of the copy.
         */
        ${className}(const ${className} &rhs);

        /**
         * Assignment operator for a ${className}. Copies all members that do not reference self.
         * Recreates member that reference self.
         * @param rhs the source object of the copy.
         * @return the copied client.
         */
        ${className}& operator=(const ${className} &rhs);

        /**
         * Copy move constructor for a S3Client. Copies all members that do not reference self.
         * Recreates member that reference self.
         * @param rhs the source object of the copy.
         */
        ${className}(${className} &&rhs);

        /**
         * Assignment move operator for a S3Client. Copies all members that do not reference self.
         * Recreates member that reference self.
         * @param rhs the source object of the copy.
         * @return the copied client.
         */
        ${className}& operator=(${className} &&rhs);
#end
#if($serviceModel.endpointRules && $serviceNamespace != "S3Crt")
#if($serviceModel.hasOnlyBearerAuth())
#set($bearerAddCtorArgs = {})
#foreach ($ctorKey in ["signPayloads", "useVirtualAddressing", "USEast1RegionalEndpoint"])
#if($additionalCtorArgs.containsKey($ctorKey))#set($addArgDummy = $bearerAddCtorArgs.put($ctorKey, $additionalCtorArgs.get($ctorKey)))#end
#end
        /**
        * Initializes client to use BearerTokenAuthSignerProvider, with default http client factory, and optional client config.
        */
        ${className}(const Aws::Auth::BearerTokenAuthSignerProvider& bearerTokenProvider,
#if($serviceModel.endpointRules)
        ${clsWSpace} std::shared_ptr<${metadata.classNamePrefix}EndpointProviderBase> endpointProvider = ${endpointsProviderDefaultCtorDummy},
#end
        ${clsWSpace} const ${clientConfigurationCls}& clientConfiguration = ${clientConfigurationCls}()#if($bearerAddCtorArgs.isEmpty()));#else,#end

#foreach($ctorArgument in $bearerAddCtorArgs)
        ${clsWSpace} ${ctorArgument}#if( $foreach.hasNext ),#else);#end

#end
#else##if($serviceModel.hasOnlyBearerAuth())
#set($defCredsChainCtor = {})
#foreach ($ctorKey in ["signPayloads", "useVirtualAddressing", "USEast1RegionalEndpoint", "additionalCredentialProvider"])
#if($additionalCtorArgs.containsKey($ctorKey))#set($addArgDummy = $defCredsChainCtor.put($ctorKey, $additionalCtorArgs.get($ctorKey)))#end
#end
       /**
        * Initializes client to use DefaultCredentialProviderChain, with default http client factory, and optional client config. If client config
        * is not specified, it will be initialized to default values.
        */
        ${className}(const ${clientConfigurationCls}& clientConfiguration = ${clientConfigurationCls}()#if($defCredsChainCtor.isEmpty() && !$serviceModel.endpointRules));#else,#end

#if($serviceModel.endpointRules)
        ${clsWSpace} std::shared_ptr<${metadata.classNamePrefix}EndpointProviderBase> endpointProvider = ${endpointsProviderDefaultCtorDummy}#if($defCredsChainCtor.isEmpty()));#else,#end

#end
#foreach($ctorArgument in $defCredsChainCtor)
        ${clsWSpace} ${ctorArgument}#if( $foreach.hasNext ),#else);#end

#end

#set($simpleCredsCtor = {})
#foreach ($ctorKey in ["signPayloads", "useVirtualAddressing", "USEast1RegionalEndpoint"])
#if($additionalCtorArgs.containsKey($ctorKey))#set($addArgDummy = $simpleCredsCtor.put($ctorKey, $additionalCtorArgs.get($ctorKey)))#end
#end
       /**
        * Initializes client to use SimpleAWSCredentialsProvider, with default http client factory, and optional client config. If client config
        * is not specified, it will be initialized to default values.
        */
        ${className}(const Aws::Auth::AWSCredentials& credentials,
#if($serviceModel.endpointRules)
        ${clsWSpace} std::shared_ptr<${metadata.classNamePrefix}EndpointProviderBase> endpointProvider = ${endpointsProviderDefaultCtorDummy},
#end
        ${clsWSpace} const ${clientConfigurationCls}& clientConfiguration = ${clientConfigurationCls}()#if($simpleCredsCtor.isEmpty()));#else,#end

#foreach($ctorArgument in $simpleCredsCtor)
        ${clsWSpace} ${ctorArgument}#if( $foreach.hasNext ),#else);#end

#end

#set($specCredsCtor = {})
#foreach ($ctorKey in ["signPayloads", "useVirtualAddressing", "USEast1RegionalEndpoint"])
#if($additionalCtorArgs.containsKey($ctorKey))#set($addArgDummy = $specCredsCtor.put($ctorKey, $additionalCtorArgs.get($ctorKey)))#end
#end
       /**
        * Initializes client to use specified credentials provider with specified client config. If http client factory is not supplied,
        * the default http client factory will be used
        */
        ${className}(const std::shared_ptr<Aws::Auth::AWSCredentialsProvider>& credentialsProvider,
#if($serviceModel.endpointRules)
        ${clsWSpace} std::shared_ptr<${metadata.classNamePrefix}EndpointProviderBase> endpointProvider = ${endpointsProviderDefaultCtorDummy},
#end
        ${clsWSpace} const ${clientConfigurationCls}& clientConfiguration = ${clientConfigurationCls}()#if($specCredsCtor.isEmpty()));#else,#end

#foreach($ctorArgument in $specCredsCtor)
        ${clsWSpace} ${ctorArgument}#if( $foreach.hasNext ),#else);#end

#end
#end##if($serviceModel.hasOnlyBearerAuth())

#if($metadata.standalone || $metadata.apigateway)
#set($standaloneCredsCtor = {})
#foreach ($ctorKey in ["signPayloads", "useVirtualAddressing", "USEast1RegionalEndpoint"])
#if($additionalCtorArgs.containsKey($ctorKey))#set($addArgDummy = $standaloneCredsCtor.put($ctorKey, $additionalCtorArgs.get($ctorKey)))#end
#end
       /**
        * Initializes client to use specified signer with default http client factory, and optional client config. If client config
        * is not specified, it will be initialized to default values.
        */
        ${className}(const std::shared_ptr<Aws::Auth::AWSAuthSignerProvider>& signerProvider,
#if($serviceModel.endpointRules)
        ${clsWSpace} std::shared_ptr<${metadata.classNamePrefix}EndpointProviderBase> endpointProvider = ${endpointsProviderDefaultCtorDummy},
#end
        ${clsWSpace} const ${clientConfigurationCls}& clientConfiguration = ${clientConfigurationCls}()#if($standaloneCredsCtor.isEmpty()));#else,#end

#foreach($ctorArgument in $specCredsCtor)
        ${clsWSpace} ${ctorArgument}#if( $foreach.hasNext ),#else);#end

#end

#end
#end##-#if($serviceModel.endpointRules && $serviceNamespace != "S3Crt")

#if($serviceModel.endpointRules)
        /* Legacy constructors due deprecation */
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientHeaderLegacyConstructors.vm")
        /* End of legacy constructors due deprecation */
#end
        virtual ~${className}();
