#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#pragma once
#set($metadata = $serviceModel.metadata)
#set($rootNamespace = $serviceModel.namespace)
#set($serviceNamespace = $metadata.namespace)
#set($exportMacro = $typeInfo.exportValue)
\#include <aws/core/utils/HashingUtils.h>
\#include <aws/core/utils/event/EventStreamHandler.h>
\#include <aws/core/client/AWSError.h>
\#include <aws/${metadata.projectName}/${metadata.classNamePrefix}_EXPORTS.h>
\#include <aws/${metadata.projectName}/${metadata.classNamePrefix}Errors.h>

\#include <aws/${metadata.projectName}/model/${operation.name}InitialResponse.h>
#foreach($eventMemberEntry in $eventStreamShape.members.entrySet())
#set($eventShape = $eventMemberEntry.value.shape)
#if(!$eventShape.members.isEmpty() && !$eventShape.isException())
\#include <aws/${metadata.projectName}/model/${eventShape.name}.h>
#end
#end

namespace ${rootNamespace}
{
namespace ${serviceNamespace}
{
namespace Model
{
    enum class ${operation.name}EventType
    {
        INITIAL_RESPONSE,
#foreach($eventMemberEntry in $eventStreamShape.members.entrySet())
#if(!$eventMemberEntry.value.shape.isException())
        ${eventMemberEntry.key.toUpperCase()},
#end
#end
        UNKNOWN
    };

    class ${operation.name}Handler : public Aws::Utils::Event::EventStreamHandler
    {
        typedef std::function<void(const ${operation.name}InitialResponse&)> ${operation.name}InitialResponseCallback;
        typedef std::function<void(const ${operation.name}InitialResponse&, const Utils::Event::InitialResponseType)> ${operation.name}InitialResponseCallbackEx;
#foreach($eventMemberEntry in $eventStreamShape.members.entrySet())
#set($eventShape = $eventMemberEntry.value.shape)
#if($eventShape.isException())
## skip exceptions
#else
#if(!${eventShape.members.isEmpty()})
        typedef std::function<void(const ${eventShape.name}&)> ${eventShape.name}Callback;
#else
        typedef std::function<void()> ${eventShape.name}Callback;
#end
#end
#end
        typedef std::function<void(const Aws::Client::AWSError<${metadata.classNamePrefix}Errors>& error)> ErrorCallback;

    public:
        ${exportMacro} ${operation.name}Handler();
        ${exportMacro} ${operation.name}Handler& operator=(const ${operation.name}Handler&) = default;

        ${exportMacro} virtual void OnEvent() override;

        ///@{
        /**
         * Sets an initial response callback. This callback gets called on the initial ${operation.name} Operation response.
         *   This can be either "initial-response" decoded event frame or decoded HTTP headers received on connection.
         *   This callback may get called more than once (i.e. on connection headers received and then on the initial-response event received).
         * @param callback
         */
        inline void SetInitialResponseCallbackEx(const ${operation.name}InitialResponseCallbackEx& callback) { m_onInitialResponse = callback; }
        /**
         * Sets an initial response callback (a legacy one that does not distinguish whether response originates from headers or from the event).
         */
        inline void SetInitialResponseCallback(const ${operation.name}InitialResponseCallback& noArgCallback)
        {
            m_onInitialResponse = [noArgCallback](const ${operation.name}InitialResponse& rs, const Utils::Event::InitialResponseType) { return noArgCallback(rs); };
        }
        ///@}
#foreach($eventMemberEntry in $eventStreamShape.members.entrySet())
#if(!$eventMemberEntry.value.shape.isException())
#set($eventShapeName = $eventMemberEntry.value.shape.name)
        inline void Set${eventShapeName}Callback(const ${eventShapeName}Callback& callback) { m_on${eventShapeName} = callback; }
#end
#end
        inline void SetOnErrorCallback(const ErrorCallback& callback) { m_onError = callback; }

        inline ${operation.name}InitialResponseCallbackEx& GetInitialResponseCallbackEx() { return m_onInitialResponse; }

    private:
        ${exportMacro} void HandleEventInMessage();
        ${exportMacro} void HandleErrorInMessage();
        ${exportMacro} void MarshallError(const Aws::String& errorCode, const Aws::String& errorMessage);

        ${operation.name}InitialResponseCallbackEx m_onInitialResponse;
#foreach($eventMemberEntry in $eventStreamShape.members.entrySet())
#set($eventShapeName = $eventMemberEntry.value.shape.name)
#if(!$eventMemberEntry.value.shape.isException())
        ${eventShapeName}Callback m_on${eventShapeName};
#end
#end
        ErrorCallback m_onError;
    };

namespace ${operation.name}EventMapper
{
    ${typeInfo.exportValue} ${operation.name}EventType Get${operation.name}EventTypeForName(const Aws::String& name);

    ${typeInfo.exportValue} Aws::String GetNameFor${operation.name}EventType(${operation.name}EventType value);
} // namespace ${operation.name}EventMapper
} // namespace Model
} // namespace ${serviceNamespace}
} // namespace ${rootNamespace}
