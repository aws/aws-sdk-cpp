#set($first = 0)
#foreach($entry in $shape.members.entrySet())
#if($entry.value.usedForHeader)
#if($first == 0)
  Aws::StringStream ss;
#set($first = 1)
#end
#set($spaces = '')
#set($memberName = $entry.key)
#set($member = $entry.value)
#set($locationName = $member.locationName)
#if($member.usedForHeader)
#set($lowerCaseVarName = $CppViewHelper.computeVariableName($memberName))
#set($memberVarName = $CppViewHelper.computeMemberVariableName($memberName))
#if($member.shape.enum && !$member.shape.enumValues.contains("NOT_SET"))
#set($varNameHasBeenSet = "$CppViewHelper.computeVariableHasBeenSetName($memberName) && $memberVarName != ${member.shape.name}::NOT_SET")
#else
#set($varNameHasBeenSet = $CppViewHelper.computeVariableHasBeenSetName($memberName))
#end
#if(!$member.required && $useRequiredField)
#set($spaces = '  ')
  if($varNameHasBeenSet)
  {
#end
#if($member.shape.enum)
  ${spaces}headers.emplace("${locationName}", ${member.shape.name}Mapper::GetNameFor${member.shape.name}($memberVarName));
#elseif($member.shape.boolean)
  ${spaces}ss << std::boolalpha << m_${lowerCaseVarName};
  ${spaces}headers.emplace("${locationName}", ss.str());
  ${spaces}ss.str("");
#elseif($member.shape.blob)
  ${spaces}ss << HashingUtils::Base64Encode(m_${lowerCaseVarName});
  ${spaces}headers.emplace("${locationName}", ss.str());
  ${spaces}ss.str("");
#elseif($member.shape.timeStamp)
  ${spaces}headers.emplace("${locationName}", m_${lowerCaseVarName}.ToGmtString(Aws::Utils::DateFormat::$CppViewHelper.computeTimestampFormatInHeader($member.shape)));
#elseif($member.shape.map)
  ${spaces}for(const auto& item : $memberVarName)
  ${spaces}{
  ${spaces}  ss << "${locationName}" << item.first;
  ${spaces}  headers.emplace(ss.str(), item.second);
  ${spaces}  ss.str("");
  ${spaces}}
#elseif($member.shape.list)
  ${spaces}headers.emplace("${locationName}", std::accumulate(std::begin($memberVarName),
  ${spaces}  std::end($memberVarName),
  ${spaces}  Aws::String{},
  ${spaces}  [](const Aws::String &acc, const ${member.shape.listMember.shape.name} &item) -> Aws::String {
#if($member.shape.listMember.shape.enum)
  ${spaces}    const auto headerValue = ${member.shape.listMember.shape.name}Mapper::GetNameFor${member.shape.listMember.shape.name}(item);
#else
  ${spaces}    const auto headerValue = item;
#end
  ${spaces}    return acc.empty() ? headerValue : acc + "," + headerValue;
  ${spaces}  }));
#else
  ${spaces}ss << m_${lowerCaseVarName};
  ${spaces}headers.emplace("${locationName}", #if($member.requiresHeaderEncoding())URI::URLEncodePath(ss.str())#else ss.str()#end);
  ${spaces}ss.str("");
#end
#if(!$member.required && $useRequiredField)
  }

#end
#end
#end
#end
#if(!$serviceModel.endpointRules)
## Extra headers from ARN: 1. x-amz-account-id for s3control 2. x-amz-outpost-id for s3control.

#if($operation.hasAccountIdInArn || $operation.hasOutpostIdInArn)
  ${rootNamespace}::${serviceNamespace}::${metadata.classNamePrefix}ARN arn($CppViewHelper.computeMemberVariableName($operation.arnEndpointMemberName));
  if (arn && arn.Validate().IsSuccess())
  {
#if($operation.hasAccountIdInArn)
    ss << arn.GetAccountId();
    headers.emplace("x-amz-account-id", ss.str());
    ss.str("");
#end
#if($operation.hasOutpostIdInArn)
    if (arn.GetResourceType() == ${rootNamespace}::${serviceNamespace}::ARNResourceType::OUTPOST)
    {
      ss << arn.GetResourceId();
      headers.emplace("x-amz-outpost-id",  ss.str());
      ss.str("");
    }
  }
#end
#end##-#if(!$serviceModel.endpointRules)

#end
