#if(!$operation.request.shape.hasEventStreamMembers())
#if($serviceNamespace == "S3Crt" && $operation.s3CrtEnabled)
#if($operation.request)
  if (!m_endpointProvider) {
    return handler(this, request, ${operation.name}Outcome(Aws::Client::AWSError<${metadata.classNamePrefix}Errors>(${metadata.classNamePrefix}Errors::INTERNAL_FAILURE, "INTERNAL_FAILURE", "Endpoint provider is not initialized", false)), handlerContext);
  }
#else
  if (!m_endpointProvider) {
    return handler(this, ${operation.name}Outcome(Aws::Client::AWSError<${metadata.classNamePrefix}Errors>(${metadata.classNamePrefix}Errors::INTERNAL_FAILURE, "INTERNAL_FAILURE", "Endpoint provider is not initialized", false)), handlerContext);
  }
#end
#else
  AWS_OPERATION_CHECK_PTR(m_endpointProvider, ${operation.name}, CoreErrors, CoreErrors::ENDPOINT_RESOLUTION_FAILURE);
#end
#else##-#if(!$operation.request.shape.hasEventStreamMembers())
  if (!m_endpointProvider) {
    handler(this, request, ${operation.name}Outcome(Aws::Client::AWSError<${metadata.classNamePrefix}Errors>(${metadata.classNamePrefix}Errors::INTERNAL_FAILURE, "INTERNAL_FAILURE", "Endpoint provider is not initialized", false)), handlerContext);
    return;
  }
#end##-#if(!$operation.request.shape.hasEventStreamMembers())
#foreach($memberEntry in $operation.request.shape.members.entrySet())
#if($memberEntry.value.validationNeeded && !$memberEntry.value.streaming && !$memberEntry.value.usedForPayload && !($operation.arnEndpointAllowed && $memberEntry.value.shape.name.equals($operation.accountIdMemberName)))
#set($memberKeyWithFirstLetterCapitalized = $CppViewHelper.capitalizeFirstChar($memberEntry.key))
  if (!request.${memberKeyWithFirstLetterCapitalized}HasBeenSet())
  {
    AWS_LOGSTREAM_ERROR("${operation.name}", "Required field: ${memberKeyWithFirstLetterCapitalized}, is not set");
#if(!$operation.request.shape.hasEventStreamMembers())
#if($serviceNamespace == "S3Crt"&& $operation.s3CrtEnabled)
#if($operation.request)
    return handler(this, request, ${operation.name}Outcome(Aws::Client::AWSError<${metadata.classNamePrefix}Errors>(${metadata.classNamePrefix}Errors::MISSING_PARAMETER, "MISSING_PARAMETER", "Missing required field [${memberKeyWithFirstLetterCapitalized}]", false)), handlerContext);
#else
    return handler(this, ${operation.name}Outcome(Aws::Client::AWSError<${metadata.classNamePrefix}Errors>(${metadata.classNamePrefix}Errors::MISSING_PARAMETER, "MISSING_PARAMETER", "Missing required field [${memberKeyWithFirstLetterCapitalized}]", false)), handlerContext);
#end
#else
    return ${operation.name}Outcome(Aws::Client::AWSError<${metadata.classNamePrefix}Errors>(${metadata.classNamePrefix}Errors::MISSING_PARAMETER, "MISSING_PARAMETER", "Missing required field [${memberKeyWithFirstLetterCapitalized}]", false));
#end
#else
    handler(this, request, ${operation.name}Outcome(Aws::Client::AWSError<${metadata.classNamePrefix}Errors>(${metadata.classNamePrefix}Errors::MISSING_PARAMETER, "MISSING_PARAMETER", "Missing required field [${memberKeyWithFirstLetterCapitalized}]", false)), handlerContext);
    return;
#end
  }
#end
#end
