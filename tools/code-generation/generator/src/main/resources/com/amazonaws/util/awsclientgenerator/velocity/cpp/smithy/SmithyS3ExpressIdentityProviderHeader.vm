#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#set($metadata = $serviceModel.metadata)
#set($rootNamespace = $serviceModel.namespace)
#set($serviceNamespace = $metadata.namespace)
#pragma once

\#include <aws/core/utils/memory/stl/AWSSet.h>
\#include <aws/core/utils/memory/stl/AWSString.h>
\#include <aws/core/utils/ConcurrentCache.h>
\#include <smithy/identity/resolver/AwsIdentityResolverBase.h>
\#include <smithy/identity/identity/AwsCredentialIdentity.h>
\#include <thread>
\#include <condition_variable>

namespace ${rootNamespace} {
    namespace Http {
        struct ServiceSpecificParameters;
    }

    namespace ${serviceNamespace} {
        class ${serviceNamespace}Client;
        class S3ExpressIdentityResolver : public smithy::IdentityResolverBase<smithy::AwsCredentialIdentityBase> {
         public:
          explicit S3ExpressIdentityResolver(const S3Client& s3Client);
          explicit S3ExpressIdentityResolver(const S3Client& s3Client, std::shared_ptr<Aws::Auth::AWSCredentialsProviderChain> providerChain);
          ResolveIdentityFutureOutcome getIdentity(
              const IdentityProperties& identityProperties,
              const AdditionalParameters& additionalParameters) override;
        
         protected:
          std::shared_ptr<std::mutex> GetMutexForBucketName(const Aws::String& bucketName);
          ResolveIdentityFutureOutcome getCredentialsFromBucket(const Aws::String& bucketName) const;
          mutable std::shared_ptr<Aws::Auth::AWSCredentialsProviderChain> m_legacyChain_sp;

         private:
          const Aws::S3::S3Client& m_s3Client;
          mutable std::mutex m_bucketNameMapMutex;
          Aws::Map<Aws::String, std::shared_ptr<std::mutex>> m_bucketNameMutex;
        };
        
        class DefaultS3ExpressIdentityResolver : public S3ExpressIdentityResolver {
         public:
          explicit DefaultS3ExpressIdentityResolver(const S3Client& s3Client);
          explicit DefaultS3ExpressIdentityResolver(
              const S3Client& s3Client,
              std::shared_ptr<Utils::ConcurrentCache<Aws::String, smithy::AwsCredentialIdentity>> credentialsCache);
          explicit DefaultS3ExpressIdentityResolver(const S3Client& s3Client, std::shared_ptr<Aws::Auth::AWSCredentialsProviderChain> providerChain);

          DefaultS3ExpressIdentityResolver(const DefaultS3ExpressIdentityResolver& other) = delete;
          DefaultS3ExpressIdentityResolver(DefaultS3ExpressIdentityResolver&& other) noexcept = delete;
          DefaultS3ExpressIdentityResolver& operator=(const DefaultS3ExpressIdentityResolver& other) = delete;
          DefaultS3ExpressIdentityResolver& operator=(DefaultS3ExpressIdentityResolver&& other) noexcept = delete;
          virtual ~DefaultS3ExpressIdentityResolver() override = default;
          ResolveIdentityFutureOutcome getIdentity(
              const IdentityProperties& identityProperties,
              const AdditionalParameters& additionalParameters) override;
        
         private:
          mutable std::shared_ptr<Aws::Utils::ConcurrentCache<Aws::String, smithy::AwsCredentialIdentity>> m_credentialsCache;
        };
        
        class DefaultAsyncS3ExpressIdentityResolver : public S3ExpressIdentityResolver {
         public:
          explicit DefaultAsyncS3ExpressIdentityResolver(
              const S3Client& s3Client,
              std::chrono::minutes refreshPeriod = std::chrono::minutes(1));
        
          explicit DefaultAsyncS3ExpressIdentityResolver(
              const S3Client& s3Client,
              std::shared_ptr<Utils::ConcurrentCache<Aws::String, smithy::AwsCredentialIdentity>> credentialsCache,
              std::chrono::minutes refreshPeriod = std::chrono::minutes(1));
        
          DefaultAsyncS3ExpressIdentityResolver(const DefaultAsyncS3ExpressIdentityResolver& other) = delete;
          DefaultAsyncS3ExpressIdentityResolver(DefaultAsyncS3ExpressIdentityResolver&& other) noexcept = delete;
          DefaultAsyncS3ExpressIdentityResolver& operator=(
              const DefaultAsyncS3ExpressIdentityResolver& other) = delete;
          DefaultAsyncS3ExpressIdentityResolver& operator=(DefaultAsyncS3ExpressIdentityResolver&& other) noexcept = delete;
        
          virtual ~DefaultAsyncS3ExpressIdentityResolver() override;
        
          ResolveIdentityFutureOutcome getIdentity(
              const IdentityProperties& identityProperties,
              const AdditionalParameters& additionalParameters) override;
        
         private:
          void refreshIdentities(std::chrono::minutes refreshPeriod);
          void threadSafeKeyInsert(const Aws::String& key);
          bool threadSafeKeyHas(const Aws::String& key);
          void threadSafeKeyEmpty();
        
          mutable std::shared_ptr<Aws::Utils::ConcurrentCache<Aws::String, smithy::AwsCredentialIdentity>> m_credentialsCache;
          Aws::Set<Aws::String> m_keysUsed;
          mutable std::mutex m_keysUsedMutex;
          mutable bool m_shouldStopBackgroundRefresh;
          Aws::UniquePtr<std::thread> m_backgroundRefreshThread;
          mutable std::mutex m_shutDownMutex;
          mutable std::condition_variable m_shutdownCondition;
        };
    }
}