void ${className}::${operation.name}Async(Model::${operation.request.shape.name}& request,
                const ${operation.name}StreamReadyHandler& streamReadyHandler,
                const ${operation.name}ResponseReceivedHandler& handler,
                const std::shared_ptr<const Aws::Client::AsyncCallerContext>& handlerContext) const
{
  AWS_ASYNC_OPERATION_GUARD(${operation.name});
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/common/ServiceClientOperationEndpointPrepareCommonBody.vm")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/common/ServiceClientOperationRequestRequiredMemberValidate.vm")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/common/UriRequestQueryParams.vm")
#if($operation.result && $operation.result.shape.hasEventStreamMembers())
#else
#if($serviceModel.endpointRules)
  JsonOutcome outcome = MakeRequest(request, endpointResolutionOutcome.GetResult(), Aws::Http::HttpMethod::HTTP_${operation.http.method}, ${operation.signerName});
#else
  JsonOutcome outcome = MakeRequest(uri, request, Aws::Http::HttpMethod::HTTP_${operation.http.method}, ${operation.signerName});
#end
#end

#set($streamModelName = '')
#foreach($entity in $operation.request.shape.members.entrySet())
#if($entity.value.shape.isEventStream())
#set($streamModelName = ${entity.key})
#set($streamModelType = ${entity.value.shape.name})
#break
#end
#end
#set($streamModelNameWithFirstLetterCapitalized = $CppViewHelper.capitalizeFirstChar($streamModelName))
  auto eventEncoderStream = Aws::MakeShared<Model::$streamModelType>(ALLOCATION_TAG);
  eventEncoderStream->SetSigner(GetSignerByName(Aws::Auth::EVENTSTREAM_SIGV4_SIGNER));
  auto requestCopy = Aws::MakeShared<${operation.request.shape.name}>("${operation.name}", request);
  requestCopy->Set${streamModelNameWithFirstLetterCapitalized}(eventEncoderStream); // this becomes the body of the request
##TODO 1.12: remove next line
  request.Set${streamModelNameWithFirstLetterCapitalized}(eventEncoderStream);

  auto asyncTask = CreateBidirectionalEventStreamTask<${operation.name}Outcome>(this,
                                         endpointResolutionOutcome.GetResultWithOwnership(),
                                         requestCopy,
                                         handler,
                                         handlerContext,
                                         eventEncoderStream);
  auto sem = asyncTask.GetSemaphore();
  m_clientConfiguration.executor->Submit(std::move(asyncTask));
  sem->WaitOne();
  streamReadyHandler(*eventEncoderStream);
}
