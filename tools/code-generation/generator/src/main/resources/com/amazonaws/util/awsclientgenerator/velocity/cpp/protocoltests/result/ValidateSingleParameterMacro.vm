##-------------------- ValidateSingleParameterMacro macro
#macro( ValidateSingleParameterMacro $shape $value )
##/* shape = R"($shape)"; value = $value */ ##
#if($shape.type == "float" || $shape.type == "double")
##float is code generated as double in CPP SDK
#if($value == '"NaN"')
std::numeric_limits<double>::quiet_NaN()##
#elseif($value == '"Infinity"')
std::numeric_limits<double>::infinity()##
#elseif($value == '"-Infinity"')
-std::numeric_limits<double>::infinity()##
#else
${value}##
#end
#break
#end###if($shape.double)
#if($shape.primitive || $shape.boolean)
${value}##
#elseif($shape.string)
R"(${value.asText()})"##
#elseif($shape.blob)
Aws::Utils::ByteBuffer(R"(${value.asText()})")##
#elseif($shape.timeStamp)
#set($macro.tsVal = "${value}")
#if($macro.tsVal.contains(".") || $macro.tsVal.contains("E"))
Aws::Utils::DateTime(${value})##
#else
Aws::Utils::DateTime(${value}L)##
#end
#elseif($shape.enum)
${shape.name}Mapper::Get${shape.name}ForName(R"e(${value.asText()})e")##
#elseif($shape.list)
#set($macro.listResult="Aws::Vector<$CppViewHelper.computeCppType($shape)>({")
#foreach($listItem in $value)
#set($macro.listResult=$macro.listResult + "#ValidateSingleParameterMacro($shape.listMember.shape, $listItem)")
#if($foreach.hasNext)#set($macro.listResult=$macro.listResult + ", ")#end
#end
#set($macro.listResult=$macro.listResult + "})")
$macro.listResult##
#elseif($shape.map)
#set($macro.mapResult="Aws::Map<$CppViewHelper.computeCppType($shape.mapKey.shape), $CppViewHelper.computeCppType($shape.mapValue.shape)>({")
#foreach($mapItem in $value.fields())
#set($macro.mapItem="{" + '"' + "$mapItem.key" + '"' + ",  ")
#set($macro.mapItem=$macro.mapItem + "#ValidateSingleParameterMacro($shape.mapValue.shape, $mapItem.value)" + "}")
#set($macro.mapResult=$macro.mapResult + $macro.mapItem)
#if($foreach.hasNext)#set($macro.mapResult=$macro.mapResult + ", ")#end
#end
#set($macro.mapResult=$macro.mapResult + "})")
$macro.mapResult##
#elseif($shape.structure)
${shape.name}(JsonValue(R"j($value)j"))##
#else
${value};
static_assert(false, R"(Codegen failure: Unsupported input $value for shape ${shape} with type ${shape.type})";
#end
#end##macro ValidateSingleParameterMacro