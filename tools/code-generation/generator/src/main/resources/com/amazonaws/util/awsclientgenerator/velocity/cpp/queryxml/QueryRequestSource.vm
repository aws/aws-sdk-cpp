#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/queryxml/QuerySerializeTemplateMacros/AllQuerySerializeTemplateMacros.vm")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#set($metadata = $serviceModel.metadata)
#set($rootNamespace = $serviceModel.namespace)
#set($serviceNamespace = $metadata.namespace)
\#include <aws/${metadata.projectName}/model/${typeInfo.className}.h>
\#include <aws/core/utils/StringUtils.h>
\#include <aws/core/utils/memory/stl/AWSStringStream.h>
#if($shape.hasQueryStringMembers())
\#include <aws/core/http/URI.h>
#end
#if($shape.hasBlobMembers())
\#include <aws/core/utils/HashingUtils.h>
#end

using namespace ${rootNamespace}::${serviceNamespace}::Model;
using namespace Aws::Utils;
#if($shape.hasQueryStringMembers())
using namespace Aws::Http;
#end

Aws::String ${typeInfo.className}::SerializePayload() const
{
  Aws::StringStream ss;
  ss << "Action=${CppViewHelper.computeOperationNameFromInputOutputShape($typeInfo.className)}&";
#foreach($member in $shape.members.entrySet())
#set($memberVarName = $CppViewHelper.computeMemberVariableName($member.key))
#set($varName = $CppViewHelper.computeVariableName($member.key))
#set($spaces = '')
#if(!$member.value.usedForPayload ||
    ($shape.hasPreSignedUrl && $member.key.equals("SourceRegion") && ${serviceNamespace} != "EC2") ||
    ($shape.hasPreSignedUrl && $member.key.equals("DestinationRegion") && ${serviceNamespace} == "EC2"))
#set($shouldSkipSerialize = true)
#else
#set($shouldSkipSerialize = false)
#end
#if(!$shouldSkipSerialize)
#if(!$member.value.required)
  if(${memberVarName}HasBeenSet)
  {
#set($spaces = "  ")
#end
#if($member.value.shape.list)
#serializeRequestQueryListElement($spaces, $member.value, $member.key, $memberVarName)
#elseif($member.value.shape.map)
#serializeRequestQueryMapElement($spaces, $member.value, $member.key, $memberVarName)
#else
#serializeRequestQuerySingleElement($spaces, $member.value, $member.key, $memberVarName, $shape.getName())
#end##--#if($member.value.shape.list || map || else)
#if(!$member.value.required)
  }

#end
#end
#end
  ss << "Version=${metadata.apiVersion}";
  return ss.str();
}

#if($shape.hasQueryStringMembers())
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/AddQueryStringParametersToRequest.vm")
#end

#if($shape.supportsPresigning)
void  ${typeInfo.className}::DumpBodyToUrl(Aws::Http::URI& uri ) const
{
  uri.SetQueryString(SerializePayload());
}
#end
#if($shape.hasHeaderMembers() || $metadata.targetPrefix)

Aws::Http::HeaderValueCollection ${typeInfo.className}::GetRequestSpecificHeaders() const
{
  Aws::Http::HeaderValueCollection headers;
#if($metadata.targetPrefix)
  headers.insert(Aws::Http::HeaderValuePair("X-Amz-Target", "${metadata.targetPrefix}.${CppViewHelper.computeOperationNameFromInputOutputShape($shape.name)}"));
#end
#if($metadata.additionalHeaders)
#foreach($headerEntry in $metadata.additionalHeaders.entrySet())
  headers.insert(Aws::Http::HeaderValuePair("${headerEntry.key}", "${headerEntry.value}"));
#end
#end
#foreach($headerEntry in $requestSpecificHeaders.entrySet())
  headers.emplace(${headerEntry.key}, ${headerEntry.value});
#end
#set($useRequiredField = true)
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ModelClassHeaderMembersSource.vm")
  return headers;
}
#end
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/common/model/ModelGetEndpointRulesContextParamDefinition.vm")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ModelClassChecksumMembers.vm")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ModelClassRequiredCompression.vm")
