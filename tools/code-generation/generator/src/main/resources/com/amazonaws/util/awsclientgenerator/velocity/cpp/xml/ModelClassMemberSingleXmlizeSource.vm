##-------------------- serializeElementToText macro
#macro( serializeElementToText $shapeMember $memberVarName )
##/* --- the actual shape member is $shapeMember; the actual shape is $shapeMember.shape; --- */
#if($shapeMember.shape.enum)
${shapeMember.shape.name}Mapper::GetNameFor${shapeMember.shape.name}(${memberVarName})##
#elseif($shapeMember.shape.timeStamp)
#set($timestamptFormatStr = $CppViewHelper.computeTimestampFormatInXml($shapeMember.shape))
${memberVarName}.ToGmtString(Aws::Utils::DateFormat::${timestamptFormatStr})##
#elseif($shapeMember.shape.boolean)
std::boolalpha << ${memberVarName}##
#elseif($shapeMember.shape.blob)
HashingUtils::Base64Encode(${memberVarName})##
#else
${memberVarName}##
#end
#end##macro serializeElementToText
##-------------------- serializeXmlPayloadElement macro
#macro( serializeXmlPayloadElement $spaces $serializationName $lowerCaseVarName $shapeMember $memberVarName $parentNode="parentNode")
#if($shapeMember.xmlAttribute)
#if($shapeMember.shape.boolean || $shapeMember.shape.primitive)
  ${spaces}ss << #serializeElementToText($shapeMember, $memberVarName);
  ${spaces}${parentNode}.SetAttributeValue("${serializationName}", ss.str());
  ${spaces}ss.str("");
#else
  ${spaces}${parentNode}.SetAttributeValue("${serializationName}", #serializeElementToText($shapeMember, $memberVarName));
#end
#else##($shapeMember.xmlAttribute)
  ${spaces}XmlNode ${lowerCaseVarName}Node = ${parentNode}.CreateChildElement("${serializationName}");
#if($shapeMember.shape.boolean || $shapeMember.shape.primitive)
  ${spaces}ss << #serializeElementToText($shapeMember, $memberVarName);
  ${spaces}${lowerCaseVarName}Node.SetText(ss.str());
  ${spaces}ss.str("");
#else
#if($shapeMember.shape.structure)
  ${spaces}${memberVarName}.AddToNode(${lowerCaseVarName}Node);
#else
  ${spaces}${lowerCaseVarName}Node.SetText(#serializeElementToText($shapeMember, $memberVarName));
#end
#end
#end
#end##macro serializeXmlPayloadElement
##-------------------- serializeXmlListPayloadElement macro
#macro( serializeXmlListPayloadElement $spaces $serializationName $lowerCaseVarName $member $memberVarName )
#if(!($member.locationName && $member.shape.flattened) && !(${member.shape.listMember.locationName} && ${member.isFlattened()}))
  ${spaces}XmlNode ${lowerCaseVarName}ParentNode = parentNode.CreateChildElement("${serializationName}");
#end
  ${spaces}for(const auto& item : $memberVarName)
  ${spaces}{
#set($listElParentNode = "parentNode")
#set($listElSerializationName = "")
#if($member.locationName && $member.shape.flattened)
#set($listElSerializationName = ${member.locationName})
#elseif(${member.shape.listMember.locationName} && ${member.isFlattened()})
#set($listElSerializationName = ${member.shape.listMember.locationName})
#elseif(${member.shape.listMember.locationName})
#set($listElSerializationName = ${member.shape.listMember.locationName})
#set($listElParentNode = "${lowerCaseVarName}ParentNode")
#else
#set($listElSerializationName = ${member.shape.listMember.shape.name})
#set($listElParentNode = "${lowerCaseVarName}ParentNode")
#end
#set($listSpaces = $spaces + "  ")
#serializeXmlPayloadElement($listSpaces, $listElSerializationName, $lowerCaseVarName, $member.shape.listMember, "item", $listElParentNode)
  ${spaces}}
#end##macro serializeXmlListPayloadElement
##-------------------- serializeXmlMapPayloadElement macro
#macro( serializeXmlMapPayloadElement $spaces $serializationName $lowerCaseVarName $member $memberVarName )
##https://smithy.io/2.0/spec/protocol-traits.html#xml-map-serialization
##TODO: might not be 100% correct, pending validation by protocol tests
##// /* --- the actual shape member is $member; the actual shape is $member.shape; --- */
##// /* --- key member: ${member.shape.mapKey} */
##// /* --- key shape: ${member.shape.mapKey.shape} */
##// /* --- key member: ${member.shape.mapValue} */
##// /* --- key shape: ${member.shape.mapValue.shape} */
#set($mapEntryParentNode = "parentNode")
#if(!($member.locationName && $member.shape.flattened))
  ${spaces}XmlNode ${lowerCaseVarName}ParentNode = parentNode.CreateChildElement("${serializationName}");
#set($mapEntryParentNode = "${lowerCaseVarName}ParentNode")
#end
  ${spaces}for(const auto& mapItem : $memberVarName)
  ${spaces}{
#set($mapSpaces = $spaces + "  ")
#set($mapEntrySerializationName = "#if($member.locationName)$member.locationName#{else}entry#end")
  ${spaces}  XmlNode ${lowerCaseVarName}MapEntryNode = ${mapEntryParentNode}.CreateChildElement("${mapEntrySerializationName}");
#set($mapKeySerializationName = "#if($member.shape.mapKey.locationName)$member.shape.mapKey.locationName#{else}key#end")
#serializeXmlPayloadElement($mapSpaces, $mapKeySerializationName, "${lowerCaseVarName}Key", $member.shape.mapKey, "mapItem.first", "${lowerCaseVarName}MapEntryNode")
#set($mapValueSerializationName = "#if($member.shape.mapValue.locationName)$member.shape.mapValue.locationName#{else}value#end")
#serializeXmlPayloadElement($mapSpaces, $mapValueSerializationName, "${lowerCaseVarName}Value", $member.shape.mapValue, "mapItem.second", "${lowerCaseVarName}MapEntryNode")
  ${spaces}}
#end##macro serializeXmlMapPayloadElement
##-------------------- END OF MACROS, ACTUAL TEMPLATE BEGINS --------------------
#if($member.shape.enum || $member.shape.boolean || $member.shape.primitive || $member.shape.timeStamp || $member.shape.structure || $member.shape.blob)
#serializeXmlPayloadElement($spaces, $serializationName, $lowerCaseVarName, $member, $memberVarName)
#elseif($member.shape.string)
#if($member.xmlAttribute)
  ${spaces}parentNode.SetAttributeValue("${serializationName}", ${memberVarName});
#else
  ${spaces}XmlNode ${lowerCaseVarName}Node = parentNode.CreateChildElement("${serializationName}");
#if($operation.arnEndpointAllowed && $operation.arnLocation.equals("body") && $operation.arnEndpointMemberName.equals($memberName) && !$serviceModel.endpointRules))
## TODO: just remove this block once endpoints check can be removed
  ${spaces}${metadata.classNamePrefix}ARN arn($CppViewHelper.computeMemberVariableName($operation.arnEndpointMemberName));
  ${spaces}if (arn && arn.Validate().IsSuccess())
  ${spaces}{
  ${spaces}  if (arn.GetResourceType() == ARNResourceType::BUCKET)
  ${spaces}  {
  ${spaces}    ${lowerCaseVarName}Node.SetText(arn.GetResourceId());
  ${spaces}  }
  ${spaces}  else if (arn.GetResourceType() == ARNResourceType::OUTPOST)
  ${spaces}  {
  ${spaces}    ${lowerCaseVarName}Node.SetText(arn.GetSubResourceId());
  ${spaces}  }
  ${spaces}  else
  ${spaces}  {
  ${spaces}    // It's a valid ARN, but has incorrect resource type.
  ${spaces}    assert(false);
  ${spaces}  }
  ${spaces}}
  ${spaces}else
  ${spaces}{
  ${spaces}  ${lowerCaseVarName}Node.SetText(${memberVarName});
  ${spaces}}
#else
  ${spaces}${lowerCaseVarName}Node.SetText(${memberVarName});
#end##$operation.arnEndpointAllowed...
#end
#elseif($member.shape.list)
#serializeXmlListPayloadElement($spaces, $serializationName, $lowerCaseVarName, $member, $memberVarName)
#elseif($member.shape.map)
#serializeXmlMapPayloadElement($spaces, $serializationName, $lowerCaseVarName, $member, $memberVarName)
#else
!!!! Code generation error: the template does not support this shape under $serializationName serialization to xml: ${member}
#end##End of member.shape is structure or list