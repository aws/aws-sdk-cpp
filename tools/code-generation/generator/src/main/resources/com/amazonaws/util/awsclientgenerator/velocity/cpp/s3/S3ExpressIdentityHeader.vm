#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#set($metadata = $serviceModel.metadata)
#set($rootNamespace = $serviceModel.namespace)
#set($serviceNamespace = $metadata.namespace)
#pragma once

\#include <aws/core/utils/memory/stl/AWSString.h>
\#include <aws/core/utils/DateTime.h>
\#include <smithy/identity/identity/AwsCredentialIdentityBase.h>

namespace ${rootNamespace} {
    namespace ${serviceNamespace} {
        class S3ExpressIdentity final: public smithy::AwsCredentialIdentityBase {
        public:
            S3ExpressIdentity() = default;

            inline S3ExpressIdentity(String accessKeyId,
                String secretKeyId,
                String sessionToken,
                const Utils::DateTime &expiration) :
                m_accessKeyId(std::move(accessKeyId)),
                m_secretKeyId(std::move(secretKeyId)),
                m_sessionToken(std::move(sessionToken)),
                m_expiration(expiration) {}

            const String &getAccessKeyId() const {
                return m_accessKeyId;
            }

            const String &getSecretKeyId() const {
                return m_secretKeyId;
            }

            const String &getSessionToken() const {
                return m_sessionToken;
            }

            const Utils::DateTime &getExpiration() const {
                return m_expiration;
            }

            String accessKeyId() override
            {
                return getAccessKeyId();
            }

            String secretAccessKey() override
            {
                return getSecretKeyId();
            }

            Crt::Optional<String> sessionToken() override
            {
                return getSessionToken();
            }

            Crt::Optional<DateTime> expiration() override
            {
                return getExpiration();
            }


        private:
            Aws::String m_accessKeyId;
            Aws::String m_secretKeyId;
            Aws::String m_sessionToken;
            Aws::Utils::DateTime m_expiration;
        };
    }
}
