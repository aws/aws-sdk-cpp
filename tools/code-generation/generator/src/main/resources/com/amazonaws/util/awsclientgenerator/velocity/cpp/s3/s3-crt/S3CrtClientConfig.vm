#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#set($metadata = $serviceModel.metadata)
#set($rootNamespace = $serviceModel.namespace)
#set($serviceNamespace = $metadata.namespace)
#pragma once

\#include <aws/${metadata.projectName}/${metadata.classNamePrefix}_EXPORTS.h>
\#include <aws/${metadata.projectName}/${metadata.classNamePrefix}ClientConfiguration.h>
\#include <aws/core/utils/memory/stl/AWSString.h>
\#include <aws/core/http/Scheme.h>
\#include <aws/core/Region.h>
\#include <aws/crt/io/Bootstrap.h>
\#include <aws/crt/io/TlsOptions.h>

namespace ${rootNamespace}
{
    namespace ${serviceNamespace}
    {
        struct ${exportValue} ClientConfiguration : ${rootNamespace}::${serviceNamespace}::${metadata.classNamePrefix}ClientConfiguration
        {
            ClientConfiguration() : ${rootNamespace}::${serviceNamespace}::${metadata.classNamePrefix}ClientConfiguration(),
                partSize(5 * 1024 * 1024),
                throughputTargetGbps(2.0) {}

            ClientConfiguration(const S3Crt::ClientConfiguration& other,
              Client::AWSAuthV4Signer::PayloadSigningPolicy iPayloadSigningPolicy = Client::AWSAuthV4Signer::PayloadSigningPolicy::Never,
              bool iUseVirtualAddressing = true,
              US_EAST_1_REGIONAL_ENDPOINT_OPTION iUseUSEast1RegionalEndPointOption = US_EAST_1_REGIONAL_ENDPOINT_OPTION::NOT_SET):
            S3CrtClientConfiguration(other, iPayloadSigningPolicy,iUseVirtualAddressing, iUseUSEast1RegionalEndPointOption),
            clientBootstrap(other.clientBootstrap),
            partSize(other.partSize),
            tlsConnectionOptions(other.tlsConnectionOptions),
            throughputTargetGbps(other.throughputTargetGbps),
            downloadMemoryUsageWindow(other.downloadMemoryUsageWindow),
            clientShutdownCallback(other.clientShutdownCallback),
            shutdownCallbackUserData(other.shutdownCallbackUserData)
            {}

            ClientConfiguration& operator=(const ClientConfiguration& other) = default;

            /** Client bootstrap used for common staples such as event loop group, host resolver, etc..
             *  If this is nullptr, SDK will create a default one for you.
             */
            std::shared_ptr<Aws::Crt::Io::ClientBootstrap> clientBootstrap;

            /** Size of parts the files will be downloaded or uploaded in. Useful for Put/GetObject APIs
             *  defaults to 5MB, if user set it to be less than 5MB, SDK will set it to 5MB.
             */
            size_t partSize = 5 * 1024 * 1024;

            /** TLS Options to be used for each connection.
             *  If scheme is Https and tlsConnectionOptions is null, SDK will create a default one for you.
             */
            std::shared_ptr<Aws::Crt::Io::TlsConnectionOptions> tlsConnectionOptions;

            /* Throughput target in Gbps that we are trying to reach. Normally it's the NIC's throughput */
            double throughputTargetGbps = 2.0;

            /** Control the maximum memory used by downloads.
             *  When set to a value > 0, the SDK uses flow control to bring the memory usage very close
             *  to the specified window. Without this cap, memory usage grows proportional to file size.
             */
            size_t downloadMemoryUsageWindow = 0;

            /* Callback and associated user data for when the client has completed its shutdown process. */
            std::function<void(void*)> clientShutdownCallback;
            void *shutdownCallbackUserData = nullptr;
        };
    }
}
