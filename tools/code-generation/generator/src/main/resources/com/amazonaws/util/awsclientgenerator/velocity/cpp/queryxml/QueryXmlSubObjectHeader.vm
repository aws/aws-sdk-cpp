#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#pragma once
#set($metadata = $serviceModel.metadata)
#set($rootNamespace = $serviceModel.namespace)
#set($serviceNamespace = $metadata.namespace)
#set($exportMacro = $typeInfo.exportValue)
\#include <aws/$metadata.projectName/${metadata.classNamePrefix}_EXPORTS.h>
\#include <aws/core/utils/memory/stl/AWSStreamFwd.h>
#foreach($header in $typeInfo.headerIncludes)
\#include $header
#end

namespace Aws
{
namespace Utils
{
namespace Xml
{
  class XmlNode;
} // namespace Xml
} // namespace Utils
#if ($rootNamespace != "Aws")
} // namespace Aws
namespace ${rootNamespace}
{
#end
namespace ${serviceNamespace}
{
namespace Model
{
#set($xmlRef = "${typeInfo.xmlNodeType}&")
#set($classNameRef = "${typeInfo.className}&")

#if($shape.documentation)
  /**
   * $shape.documentation
   */
#end
  class $typeInfo.className
  {
  public:
    ${exportMacro} ${typeInfo.className}();
    ${exportMacro} ${typeInfo.className}(const ${xmlRef} xmlNode);
    ${exportMacro} ${classNameRef} operator=(const ${xmlRef} xmlNode);

    ${exportMacro} void OutputToStream(Aws::OStream& ostream, const char* location, unsigned index, const char* locationValue) const;
    ${exportMacro} void OutputToStream(Aws::OStream& oStream, const char* location) const;

#set($useRequiredField = true)
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ModelClassMembersAndInlines.vm")
  };

} // namespace Model
} // namespace ${serviceNamespace}
} // namespace ${rootNamespace}
