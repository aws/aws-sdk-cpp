#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#set($metadata = $serviceModel.metadata)
#set($rootNamespace = $serviceModel.namespace)
#set($serviceNamespace = $metadata.namespace)
#set($className = "${metadata.classNamePrefix}Client")
#pragma once
\#include <aws/$metadata.projectName/${metadata.classNamePrefix}_EXPORTS.h>
\#include <aws/${metadata.projectName}/${metadata.classNamePrefix}EndpointProvider.h>
\#include <aws/core/client/AWSClient.h>
\#include <aws/core/client/AWSClientAsyncCRTP.h>
\#include <aws/core/auth/AWSAuthSigner.h>
\#include <aws/core/utils/xml/XmlSerializer.h>
\#include <aws/core/utils/DNS.h>
\#include <aws/$metadata.projectName/${metadata.classNamePrefix}ServiceClientModel.h>
#set($arnEndpointSupported = true)

namespace ${rootNamespace}
{
namespace ${metadata.namespace}
{

#if($serviceModel.documentation)
    /**
     * ${serviceModel.documentation}
     */
#end
#set($finalClass = " final")
#if($serviceModel.enableVirtualOperations)
#set($finalClass = "")
#end
    class ${CppViewHelper.computeExportValue($metadata.classNamePrefix)} ${className}$finalClass : public Aws::Client::AWSXMLClient, public Aws::Client::ClientWithAsyncTemplateMethods<${className}>
    {
    public:
        typedef Aws::Client::AWSXMLClient BASECLASS;
        static const char* GetServiceName();
        static const char* GetAllocationTag();

#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientHeaderConfigTypeDeclarations.vm")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientHeaderConstructors.vm")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientHeaderOperations.vm")

        void OverrideEndpoint(const Aws::String& endpoint);
        std::shared_ptr<${metadata.classNamePrefix}EndpointProviderBase>& accessEndpointProvider();
    private:
        friend class Aws::Client::ClientWithAsyncTemplateMethods<${className}>;
        void init(const ${metadata.classNamePrefix}ClientConfiguration& clientConfiguration);
        ${metadata.classNamePrefix}ClientConfiguration m_clientConfiguration;
#if($metadata.hasEndpointDiscoveryTrait)
        mutable Aws::Utils::ConcurrentCache<Aws::String, Aws::String> m_endpointsCache;
#end
        std::shared_ptr<${metadata.classNamePrefix}EndpointProviderBase> m_endpointProvider;
    };

  } // namespace ${metadata.namespace}
} // namespace ${rootNamespace}
