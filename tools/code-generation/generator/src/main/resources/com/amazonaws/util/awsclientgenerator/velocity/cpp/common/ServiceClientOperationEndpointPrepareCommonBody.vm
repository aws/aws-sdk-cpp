#if($operation.arnEndpointAllowed && $operation.hasAccountIdMember)
#set($accountIdMemberWithFirstLetterCapitalized = $CppViewHelper.capitalizeFirstChar($operation.accountIdMemberName))
      if (request.Get${accountIdMemberWithFirstLetterCapitalized}().size() != 12 || request.Get${accountIdMemberWithFirstLetterCapitalized}().find_first_not_of("0123456789") != Aws::String::npos)
      {
          AWS_LOGSTREAM_ERROR("${operation.name}", "HostPrefix required field: ${accountIdMemberWithFirstLetterCapitalized} has invalid value");
          return ${operation.name}Outcome(Aws::Client::AWSError<${metadata.classNamePrefix}Errors>(${metadata.classNamePrefix}Errors::INVALID_PARAMETER_VALUE, "INVALID_PARAMETER", "${accountIdMemberWithFirstLetterCapitalized} is invalid", false));
      }
#else
#foreach($memberEntry in $operation.request.shape.members.entrySet())
#if($memberEntry.value.validationNeeded && !$memberEntry.value.streaming && !$memberEntry.value.usedForPayload && $memberEntry.key.equalsIgnoreCase("AccountId"))
#set($memberKeyWithFirstLetterCapitalized = $CppViewHelper.capitalizeFirstChar($memberEntry.key))
      if (request.Get${memberKeyWithFirstLetterCapitalized}().size() != 12 || request.Get${memberKeyWithFirstLetterCapitalized}().find_first_not_of("0123456789") != Aws::String::npos)
      {
          AWS_LOGSTREAM_ERROR("${operation.name}", "Required field: ${memberKeyWithFirstLetterCapitalized} has invalid value");
          return ${operation.name}Outcome(Aws::Client::AWSError<${metadata.classNamePrefix}Errors>(${metadata.classNamePrefix}Errors::INVALID_PARAMETER_VALUE, "INVALID_PARAMETER", "${memberKeyWithFirstLetterCapitalized} is invalid", false));
      }
#end
#end
#end
#if($serviceModel.metadata.serviceId == "EC2")
#set($presignSpelling = "PresignedUrl")
#set($shouldGenerateUrl = "request.SourceRegionHasBeenSet()")
#else
#set($presignSpelling = "PreSignedUrl")
#set($shouldGenerateUrl = "request.SourceRegionHasBeenSet() && !request.${presignSpelling}HasBeenSet()")
#end
#if($operation.hasPreSignedUrl)
  ${operation.request.shape.name} newRequest = request;
      if (${shouldGenerateUrl})
      {
          Aws::Endpoint::EndpointParameters endpointParameters;
#if($operation.staticContextParams)
#foreach($staticParamPair in $operation.staticContextParams.entrySet())
          parameters.emplace_back(Aws::String("${staticParamPair.key}"), ${staticParamPair.value.get("value").getValue()});
#end
#end
          endpointParameters.emplace_back(Aws::Endpoint::EndpointParameter("Region", request.GetSourceRegion()));
          ResolveEndpointOutcome presignedEndpointResolutionOutcome = m_endpointProvider->ResolveEndpoint(endpointParameters);
          AWS_OPERATION_CHECK_SUCCESS(presignedEndpointResolutionOutcome, ${operation.name}, CoreErrors, CoreErrors::ENDPOINT_RESOLUTION_FAILURE, presignedEndpointResolutionOutcome.GetError().GetMessage());
          newRequest.Set${presignSpelling}(GeneratePresignedUrl(request, presignedEndpointResolutionOutcome.GetResult().GetURI(),
                                                  Aws::Http::HttpMethod::HTTP_GET, request.GetSourceRegion().c_str(),
                                                  {{ "DestinationRegion", m_region }}, 3600));
      }
#end##-#if($operation.hasPreSignedUrl)
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/common/ServiceClientOperationEndpointDiscoveryWithRules.vm")