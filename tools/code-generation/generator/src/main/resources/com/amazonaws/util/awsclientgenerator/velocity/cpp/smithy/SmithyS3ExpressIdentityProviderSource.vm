#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#set($metadata = $serviceModel.metadata)
#set($rootNamespace = $serviceModel.namespace)
#set($serviceNamespace = $metadata.namespace)
\#include <aws/core/utils/logging/LogMacros.h>
\#include <aws/${metadata.projectName}/${serviceNamespace}Client.h>
\#include <aws/${metadata.projectName}/S3ExpressIdentityResolver.h>
\#include <aws/${metadata.projectName}/model/CreateSessionRequest.h>
\#include <aws/core/auth/AWSCredentialsProviderChain.h>
\#include <smithy/identity/signer/built-in/S3ExpressSigner.h>
\#include <utility>
\#include <thread>

using namespace ${rootNamespace}::${serviceNamespace};
using namespace ${rootNamespace}::Utils;
using namespace ${rootNamespace}::Http;
using namespace std::chrono;
using namespace smithy;
using CacheValueType = typename ${rootNamespace}::Utils::Cache<${rootNamespace}::String, AwsCredentialIdentity>::Value;

namespace{
const char S3_EXPRESS_IDENTITY_PROVIDER[] = "S3ExpressIdentityProvider";
const int DEFAULT_CACHE_SIZE = 100;
}
S3ExpressIdentityResolver::S3ExpressIdentityResolver(const S3Client& s3Client) : m_s3Client(s3Client), m_credsProvider(Aws::MakeShared<Aws::Auth::DefaultAWSCredentialsProviderChain>("S3ExpressIdentityResolver")) {}

S3ExpressIdentityResolver::S3ExpressIdentityResolver(const S3Client& s3Client, std::shared_ptr<Aws::Auth::AWSCredentialsProvider>  credentialProvider):
    m_s3Client{s3Client},m_credsProvider{credentialProvider}{
    assert(m_credsProvider);
};

S3ExpressIdentityResolver::ResolveIdentityFutureOutcome S3ExpressIdentityResolver::getIdentity(
    const IdentityProperties& identityProperties, const AdditionalParameters& additionalParameters){
    const auto params = Aws::MakeShared<ServiceSpecificParameters>(S3_EXPRESS_IDENTITY_PROVIDER);
    for (const auto& paramMap: {identityProperties, additionalParameters})
    {
        TransformAndInsert<String, Aws::Crt::Variant<Aws::String, bool>, String>(paramMap,
           params->parameterMap,
           [](const Aws::Crt::Variant<Aws::String, bool>& value) -> Aws::String
           {
               if (value.holds_alternative<bool>())
               {
                   return value.get<bool>() ? "true" : "false";
               }
               if (value.holds_alternative<Aws::String>())
               {
                   return value.get<Aws::String>();
               }
               return {};
           });
    }

    //if signer name is not s3 express as set in signer properties, get from credential provider
    auto signerName = params->parameterMap.find("signerName");
    if (signerName != params->parameterMap.end())
    {
       if (signerName->second != smithy::S3_EXPRESS_SIGNER_NAME)
       {
        if(!m_credsProvider)
        {
            AWS_LOGSTREAM_ERROR(S3_EXPRESS_IDENTITY_PROVIDER, "Failed to make S3Express Connect Call")
            return ResolveIdentityFutureOutcome();
        }
        auto creds = m_credsProvider->GetAWSCredentials();
        return ResolveIdentityFutureOutcome(Aws::MakeUnique<AwsCredentialIdentity>("DefaultAwsCredentialIdentityResolver",  AwsCredentialIdentity{creds.GetAWSAccessKeyId(), creds.GetAWSSecretKey(), creds.GetSessionToken(), creds.GetExpiration()}));
       }
    }
    
    auto identity =  Aws::MakeUnique<AwsCredentialIdentity>("DefaultAwsCredentialIdentityResolver", GetS3ExpressIdentity(params));
    
    return ResolveIdentityFutureOutcome(std::move(identity));
}

std::shared_ptr<std::mutex> S3ExpressIdentityResolver::GetMutexForBucketName(const Aws::String& bucketName) {
  std::lock_guard<std::mutex> lock(m_bucketNameMapMutex);
  auto it = m_bucketNameMutex.find(bucketName);
  if (it != m_bucketNameMutex.end()) {
    return it->second;
  }
  auto bucketMutex = Aws::MakeShared<std::mutex>(S3_EXPRESS_IDENTITY_PROVIDER);
  m_bucketNameMutex.emplace(bucketName, bucketMutex);
  return bucketMutex;
}

AwsCredentialIdentity S3ExpressIdentityResolver::GetCredentialsFromBucket(const Aws::String& bucketName) const {
  auto outcome = m_s3Client.CreateSession(Model::CreateSessionRequest().WithBucket(bucketName));
  // If we fail the connect call return empty credentials and log an error message.
  if (!outcome.IsSuccess()) {
      AWS_LOGSTREAM_ERROR(S3_EXPRESS_IDENTITY_PROVIDER, "Failed to make S3Express Connect Call")
      return {"", "", {""}, {}};
  }
  auto result = outcome.GetResult();
  const auto &credentials = result.GetCredentials();
  // if expiry is present, use it, otherwise default to 5 minutes expiry
  auto expiry = [&]() -> Aws::Utils::DateTime {
      if (credentials.ExpirationHasBeenSet()) {
          return credentials.GetExpiration();
      }
      return Aws::Utils::DateTime::Now() + minutes(5);
  }();
  return {credentials.GetAccessKeyId(),
      credentials.GetSecretAccessKey(),
      credentials.GetSessionToken(),
      expiry};
}

DefaultS3ExpressIdentityResolver::DefaultS3ExpressIdentityResolver(const S3Client& s3Client)
    : S3ExpressIdentityResolver{s3Client}, m_credentialsCache{Aws::MakeShared<Aws::Utils::ConcurrentCache<Aws::String, AwsCredentialIdentity>>(S3_EXPRESS_IDENTITY_PROVIDER,
            DEFAULT_CACHE_SIZE)}{};

DefaultS3ExpressIdentityResolver::DefaultS3ExpressIdentityResolver(
    const S3Client& s3Client,
    std::shared_ptr<Utils::ConcurrentCache<Aws::String, AwsCredentialIdentity>> credentialsCache)
    : S3ExpressIdentityResolver{s3Client}, m_credentialsCache{credentialsCache} {};

DefaultS3ExpressIdentityResolver::DefaultS3ExpressIdentityResolver(const S3Client& s3Client, const std::shared_ptr<Aws::Auth::AWSCredentialsProvider>  credentialProvider):
    S3ExpressIdentityResolver{s3Client,credentialProvider}, m_credentialsCache{Aws::MakeShared<Aws::Utils::ConcurrentCache<Aws::String, AwsCredentialIdentity>>(S3_EXPRESS_IDENTITY_PROVIDER,
            DEFAULT_CACHE_SIZE)}{};

AwsCredentialIdentity DefaultS3ExpressIdentityResolver::GetS3ExpressIdentity(const std::shared_ptr<Aws::Http::ServiceSpecificParameters> &serviceSpecificParameters) {
    auto bucketNameIter = serviceSpecificParameters->parameterMap.find("bucketName");
    if (bucketNameIter == serviceSpecificParameters->parameterMap.end()) {
        AWS_LOGSTREAM_ERROR(S3_EXPRESS_IDENTITY_PROVIDER, "property bucketName Required to make call")
        return {"", "", {""}, {}};
    }
    std::lock_guard<std::mutex> lock(*GetMutexForBucketName(bucketNameIter->second));
    AwsCredentialIdentity identity;
    auto isInCache = m_credentialsCache->Get(bucketNameIter->second, identity);
    if (!isInCache || (identity.expiration().has_value() && (identity.expiration().value() - minutes(1) < Aws::Utils::DateTime::Now())) ) {
        identity = S3ExpressIdentityResolver::GetCredentialsFromBucket(bucketNameIter->second);
        if (identity.expiration().has_value()) {
          m_credentialsCache->Put(bucketNameIter->second,
              identity,
              std::chrono::milliseconds(identity.expiration().value().Millis() - Aws::Utils::DateTime::Now().Millis()));
        }
    }
    return identity;
}

DefaultAsyncS3ExpressIdentityResolver::DefaultAsyncS3ExpressIdentityResolver(
    const S3Client& s3Client, std::chrono::minutes refreshPeriod)
    : DefaultAsyncS3ExpressIdentityResolver(s3Client,
                                            Aws::MakeShared<Aws::Utils::ConcurrentCache<Aws::String, AwsCredentialIdentity>>(
                                                S3_EXPRESS_IDENTITY_PROVIDER, DEFAULT_CACHE_SIZE),
                                            refreshPeriod) {}

DefaultAsyncS3ExpressIdentityResolver::DefaultAsyncS3ExpressIdentityResolver(
    const S3Client& s3Client, std::shared_ptr<Utils::ConcurrentCache<Aws::String, AwsCredentialIdentity>> credentialsCache,
    std::chrono::minutes refreshPeriod)
    : S3ExpressIdentityResolver(s3Client), m_credentialsCache(std::move(credentialsCache)) {
  // Start a thread to background refresh the keys currently in the cache.
  m_shouldStopBackgroundRefresh = false;
  m_backgroundRefreshThread = Aws::MakeUnique<std::thread>(
      S3_EXPRESS_IDENTITY_PROVIDER, std::thread(&DefaultAsyncS3ExpressIdentityResolver::refreshIdentities, this, refreshPeriod));
}

DefaultAsyncS3ExpressIdentityResolver::~DefaultAsyncS3ExpressIdentityResolver(){
  {
    std::unique_lock<std::mutex> lock(m_shutDownMutex);
    m_shouldStopBackgroundRefresh = true;
    m_shutdownCondition.notify_all();
  }
  m_backgroundRefreshThread->join();
}

AwsCredentialIdentity DefaultAsyncS3ExpressIdentityResolver::GetS3ExpressIdentity(const std::shared_ptr<Aws::Http::ServiceSpecificParameters> &serviceSpecificParameters){
  auto bucketNameIter = serviceSpecificParameters->parameterMap.find("bucketName");
  if (bucketNameIter == serviceSpecificParameters->parameterMap.end()) {
      AWS_LOGSTREAM_ERROR(S3_EXPRESS_IDENTITY_PROVIDER, "property bucketName Required to make call")
      return {"", "", {""}, {}};
  }
  threadSafeKeyInsert(bucketNameIter->second);
  std::lock_guard<std::mutex> lock(*GetMutexForBucketName(bucketNameIter->second));
  AwsCredentialIdentity identity;
  auto isInCache = m_credentialsCache->Get(bucketNameIter->second, identity);
  if (!isInCache || (identity.expiration().has_value() && (identity.expiration().value() - minutes(1) < Aws::Utils::DateTime::Now())) ) {
      identity = S3ExpressIdentityResolver::GetCredentialsFromBucket(bucketNameIter->second);
      if (identity.expiration().has_value()) {
        m_credentialsCache->Put(bucketNameIter->second,
            identity,
            std::chrono::milliseconds(identity.expiration().value().Millis() - Aws::Utils::DateTime::Now().Millis()));
      }
  }
  return identity;
}

void DefaultAsyncS3ExpressIdentityResolver::threadSafeKeyEmpty() {
  std::lock_guard<std::mutex> lock(m_keysUsedMutex);
  m_keysUsed.clear();
}

bool DefaultAsyncS3ExpressIdentityResolver::threadSafeKeyHas(const Aws::String& key) {
  std::lock_guard<std::mutex> lock(m_keysUsedMutex);
  return m_keysUsed.find(key) != m_keysUsed.end();
}

void DefaultAsyncS3ExpressIdentityResolver::threadSafeKeyInsert(const Aws::String& key) {
  std::lock_guard<std::mutex> lock(m_keysUsedMutex);
  m_keysUsed.insert(key);
}

void DefaultAsyncS3ExpressIdentityResolver::refreshIdentities(std::chrono::minutes refreshPeriod) {
  auto filterUnusedKeys = [&](const Aws::String &bucketName, const CacheValueType &valueType) -> bool {
      std::lock_guard<std::mutex> lock(*GetMutexForBucketName(bucketName));
      AWS_UNREFERENCED_PARAM(valueType);
      return !threadSafeKeyHas(bucketName);
  };
  auto refreshIdentityWhenCloseToExpiry = [&](const Aws::String &bucketName,
      const CacheValueType &valueType) -> CacheValueType {
      std::lock_guard<std::mutex> lock(*GetMutexForBucketName(bucketName));
      if  ((!valueType.val.expiration().has_value()) || 
          (duration_cast<milliseconds>(refreshPeriod).count() < valueType.val.expiration().value().Millis() &&
          valueType.val.expiration().value() - refreshPeriod < Aws::Utils::DateTime::Now())) {
          auto updatedIdentity = this->S3ExpressIdentityResolver::GetCredentialsFromBucket(bucketName);
          return {updatedIdentity.expiration().value(), updatedIdentity};
      }
      return valueType;
  };
  std::unique_lock<std::mutex> lock(m_shutDownMutex);
  while (!m_shouldStopBackgroundRefresh) {
      m_credentialsCache->Filter(filterUnusedKeys);
      m_credentialsCache->Transform(refreshIdentityWhenCloseToExpiry);
      threadSafeKeyEmpty();
      m_shutdownCondition.wait_for(lock, refreshPeriod, [this] { return m_shouldStopBackgroundRefresh; });
  }
}
