#foreach($member in $shape.members.entrySet())
#set($moveType = '')
#set($moveValueType = '')
#set($keyMoveType = '')
#set($keyValueType = '')
#set($inline = "inline ")
#if(!((($shape.payload && ($shape.payload == $member.key && !$member.value.shape.structure && !$member.value.shape.list)) || $member.value.streaming) && $shape.request))
#set($memberDocumentation = '')
#if($member.value.documentation)
#set($memberDocumentation ="/**${nl}     * ${member.value.documentation}${nl}     */")
#end

#if((($shape.payload && ($shape.payload == $member.key && !$member.value.shape.structure && !$member.value.shape.list)) || $member.value.streaming) && $shape.result)
#set($cppType = "Aws::Utils::Stream::ResponseStream")
#set($isStream = true)
#else
#set($cppType = $CppViewHelper.computeCppType($member.value.shape))
#set($isStream = false)
#end
#set($subShape = $member.value.shape)
#if ($shape.request && $member.value.shape.isEventStream())
    #set($isEventStreamInput = true)
#else
    #set($isEventStreamInput = false)
#end
#if(!$subShape.primitive)
#set($rawCppType = ${cppType})
#set($cppType = "const ${rawCppType}&")
#set($moveType = "${rawCppType}&&")
#end
#if($subShape.document)
#set($returnType = "Aws::Utils::DocumentView")
#else
#set($returnType = ${cppType})
#end
#set ($required = '')
#if(!$isEventStreamInput && !$member.value.required && $useRequiredField)
#set ($required = "${CppViewHelper.computeVariableHasBeenSetName($member.key)} = true; ")
#end
#set($memberVariableName = $CppViewHelper.computeMemberVariableName($member.key))
#set($memberKeyWithFirstLetterCapitalized = $CppViewHelper.capitalizeFirstChar($member.key))
#set($hasBeenSetBody = " { return ${CppViewHelper.computeVariableHasBeenSetName($member.key)}; }")
#set($witherWithCopy = " { Set${memberKeyWithFirstLetterCapitalized}(value); return *this;}")
#set($witherWithMove = " { Set${memberKeyWithFirstLetterCapitalized}(std::move(value)); return *this;}")
#set($adderWithCopy = " { ${required}${memberVariableName}.push_back(value); return *this; }")
#set($adderWithMove = " { ${required}${memberVariableName}.push_back(std::move(value)); return *this; }")
#if($member.value.shape.getName() == $shape.getName())
#set($getterBody = "{ return ${memberVariableName}[0]; }")
#set($setterWithCopy = " { ${required}${memberVariableName}.resize(1); ${memberVariableName}[0] = value; }")
#set($setterWithMove = " { ${required}${memberVariableName}.resize(1); ${memberVariableName}[0] = std::move(value); }")
#elseif($member.value.shape.isMutuallyReferencedWith($shape))
#set($hasBeenSetBody = ";")
#set($getterBody = ";")
#set($setterWithCopy = ";")
#set($setterWithMove = ";")
#set($witherWithCopy = ";")
#set($witherWithMove = ";")
#set($adderWithCopy = ";")
#set($adderWithMove = ";")
#set($inline = "")
#else
#set($getterBody = "{ return ${memberVariableName}; }")
#set($setterWithCopy = " { ${required}${memberVariableName} = value; }")
#set($setterWithMove = " { ${required}${memberVariableName} = std::move(value); }")
#end
#if($isStream)
    $memberDocumentation
    ${inline}Aws::IOStream& Get${memberKeyWithFirstLetterCapitalized}() { return ${memberVariableName}.GetUnderlyingStream(); }

    $memberDocumentation
    ${inline}void ReplaceBody(Aws::IOStream* body) { ${memberVariableName} = Aws::Utils::Stream::ResponseStream(body); }

#elseif ($isEventStreamInput)
    $memberDocumentation
    std::shared_ptr<${member.value.shape.name}> Get${memberKeyWithFirstLetterCapitalized}() const ${getterBody}

    $memberDocumentation
    void Set${memberKeyWithFirstLetterCapitalized}(const std::shared_ptr<${member.value.shape.name}>& value)${setterWithCopy}

    $memberDocumentation
    ${classNameRef} With${memberKeyWithFirstLetterCapitalized}(const std::shared_ptr<${member.value.shape.name}>& value)${witherWithCopy}

#else
#set($override = "")
#if($memberKeyWithFirstLetterCapitalized == "ContentType" && $shape.hasStreamMembers() && $shape.request)
#set($override = " override ")
#end
    $memberDocumentation
    ${inline}${returnType} Get${memberKeyWithFirstLetterCapitalized}() const$override${getterBody}

#end
#if(!$isStream && !$isEventStreamInput)
#if(!$member.value.required && $useRequiredField)
    $memberDocumentation
    ${inline}bool ${memberKeyWithFirstLetterCapitalized}HasBeenSet() const${hasBeenSetBody}

#end
    $memberDocumentation
    ${inline}void Set${memberKeyWithFirstLetterCapitalized}(${cppType} value)${setterWithCopy}

#if(!$subShape.primitive)
    $memberDocumentation
    ${inline}void Set${memberKeyWithFirstLetterCapitalized}(${moveType} value)${setterWithMove}

#end
#if($member.value.shape.string)
    $memberDocumentation
    ${inline}void Set${memberKeyWithFirstLetterCapitalized}(const char* value) { ${required}${memberVariableName}.assign(value); }

#end
    $memberDocumentation
    ${inline}${classNameRef} With${memberKeyWithFirstLetterCapitalized}(${cppType} value)${witherWithCopy}

#if(!$subShape.primitive)
    $memberDocumentation
    ${inline}${classNameRef} With${memberKeyWithFirstLetterCapitalized}(${moveType} value)${witherWithMove}

#end
#if($member.value.shape.string)
    $memberDocumentation
    ${inline}${classNameRef} With${memberKeyWithFirstLetterCapitalized}(const char* value)${witherWithCopy}

#end
#end
#if($member.value.shape.map)##TODO: replace Adder functions with $adderWithCopy for map type.
#set($mapMember = $member.value.shape)
#set($keyType = $CppViewHelper.computeCppType($mapMember.mapKey.shape))
#set($valueType = $CppViewHelper.computeCppType($mapMember.mapValue.shape))
#if(!$mapMember.mapKey.shape.primitive)
#set($rawKeyType = $keyType)
#set($keyType = "const ${rawKeyType}&")
#set($keyMoveType = "${rawKeyType}&&")
#end
#if(!$mapMember.mapValue.shape.primitive)
#set($rawValueType = $valueType)
#set($valueType = "const ${rawValueType}&")
#set($valueMoveType = "${rawValueType}&&")
#end
    $memberDocumentation
    ${inline}${classNameRef} Add${memberKeyWithFirstLetterCapitalized}(${keyType} key, ${valueType} value) { ${required}${memberVariableName}.emplace(key, value); return *this; }

#if(!$mapMember.mapKey.shape.primitive)
    $memberDocumentation
    ${inline}${classNameRef} Add${memberKeyWithFirstLetterCapitalized}(${keyMoveType} key, ${valueType} value) { ${required}${memberVariableName}.emplace(std::move(key), value); return *this; }

#end
#if(!$mapMember.mapValue.shape.primitive)
    $memberDocumentation
    ${inline}${classNameRef} Add${memberKeyWithFirstLetterCapitalized}(${keyType} key, ${valueMoveType} value) { ${required}${memberVariableName}.emplace(key, std::move(value)); return *this; }

#end
#if(!$mapMember.mapKey.shape.primitive && !$mapMember.mapValue.shape.primitive)
    $memberDocumentation
    ${inline}${classNameRef} Add${memberKeyWithFirstLetterCapitalized}(${keyMoveType} key, ${valueMoveType} value) { ${required}${memberVariableName}.emplace(std::move(key), std::move(value)); return *this; }

#end
#if($mapMember.mapKey.shape.string || $mapMember.mapValue.shape.string)
#if($mapMember.mapKey.shape.string)
#set($keyType = 'const char*')
#if(!$mapMember.mapValue.shape.primitive)
    $memberDocumentation
    ${inline}${classNameRef} Add${memberKeyWithFirstLetterCapitalized}(${keyType} key, ${valueMoveType} value) { ${required}${memberVariableName}.emplace(key, std::move(value)); return *this; }

#end
#end
#if($mapMember.mapValue.shape.string)
#set($valueType = 'const char*')
#if(!$mapMember.mapKey.shape.primitive)
    $memberDocumentation
    ${inline}${classNameRef} Add${memberKeyWithFirstLetterCapitalized}(${keyMoveType} key, ${valueType} value) { ${required}${memberVariableName}.emplace(std::move(key), value); return *this; }

#end
#end
    $memberDocumentation
    ${inline}${classNameRef} Add${memberKeyWithFirstLetterCapitalized}(${keyType} key, ${valueType} value) { ${required}${memberVariableName}.emplace(key, value); return *this; }

#end
#end
#if($member.value.shape.list)
#set($listMember = $member.value.shape)
#set($valueType = $CppViewHelper.computeCppType($listMember.listMember.shape))
#if(!$listMember.listMember.shape.primitive)
#set($rawValueType = "${valueType}")
#set($valueType = "const ${rawValueType}&")
#set($moveValueType = "${rawValueType}&&")
#end
    $memberDocumentation
    ${inline}${classNameRef} Add${memberKeyWithFirstLetterCapitalized}(${valueType} value)$adderWithCopy

#if(!$listMember.listMember.shape.primitive)
    $memberDocumentation
    ${inline}${classNameRef} Add${memberKeyWithFirstLetterCapitalized}(${moveValueType} value)$adderWithMove

#end
#if($listMember.listMember.shape.string)
#set($valueType = 'const char*')
    $memberDocumentation
    ${inline}${classNameRef} Add${memberKeyWithFirstLetterCapitalized}(${valueType} value) { ${required}${memberVariableName}.push_back(value); return *this; }

#end
#end
#end
#end
#if($shape.members.size() > 0)
  private:
#foreach($member in $shape.members.entrySet())

#if ($shape.request && $member.value.shape.isEventStream())
#set($isEventStreamInput = true)
#else
#set($isEventStreamInput = false)
#end
#if((($shape.payload && ($shape.payload == $member.key && !$member.value.shape.structure && !$member.value.shape.list)) || $member.value.streaming) && $shape.result)
  Aws::Utils::Stream::ResponseStream $CppViewHelper.computeMemberVariableName($member.key);
#elseif(($shape.payload && ($shape.payload == $member.key && !$member.value.shape.structure && !$member.value.shape.list)) && $shape.request)
#else
#if($member.value.shape.getName() == $shape.getName())
    Aws::Vector<$CppViewHelper.computeCppType($member.value.shape)> $CppViewHelper.computeMemberVariableName($member.key);
#elseif($member.value.shape.isMutuallyReferencedWith($shape))
    std::shared_ptr<$CppViewHelper.computeCppType($member.value.shape)> $CppViewHelper.computeMemberVariableName($member.key);
#elseif($isEventStreamInput)
    std::shared_ptr<$member.value.shape.name> $CppViewHelper.computeMemberVariableName($member.key);
#else
    $CppViewHelper.computeCppType($member.value.shape) $CppViewHelper.computeMemberVariableName($member.key);
#end
#if(!$member.value.required && $useRequiredField && !$isEventStreamInput)
    bool ${CppViewHelper.computeVariableHasBeenSetName($member.key)};
#end
#end
#end
#if($operation.result.shape.hasEventStreamMembers())
    Aws::Utils::Event::EventStreamDecoder m_decoder;
    ${operation.name}Handler m_handler;

#end
#end
