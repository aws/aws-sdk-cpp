void ${typeInfo.className}::AddQueryStringParameters(URI& uri) const
{
    Aws::StringStream ss;
#foreach($memberEntry in $shape.members.entrySet())
#if($memberEntry.value.usedForQueryString && !$memberEntry.value.customizedQuery)
#set($memberVarName = $CppViewHelper.computeMemberVariableName($memberEntry.key))
#set($spaces = '')
#if(!$memberEntry.value.required)
    if($CppViewHelper.computeVariableHasBeenSetName($memberEntry.key))
    {
#set($spaces = '  ')
#end
#if($memberEntry.value.shape.enum)
    ${spaces}ss << ${memberEntry.value.shape.name}Mapper::GetNameFor${memberEntry.value.shape.name}(${memberVarName});
    ${spaces}uri.AddQueryStringParameter("${memberEntry.value.locationName}", ss.str());
    ${spaces}ss.str("");
#elseif($memberEntry.value.shape.timeStamp)
    ${spaces}ss << ${memberVarName}.ToGmtString(DateFormat::RFC822);
    ${spaces}uri.AddQueryStringParameter("${memberEntry.value.locationName}", ss.str());
    ${spaces}ss.str("");
#elseif($memberEntry.value.shape.map)
    ${spaces}for(auto& item : ${memberVarName})
    ${spaces}{
    ${spaces}  ss << item.second;
    ${spaces}  uri.AddQueryStringParameter(item.first.c_str(), ss.str());
    ${spaces}  ss.str("");
    ${spaces}}
#elseif($memberEntry.value.shape.list)
    ${spaces}for(const auto& item : $memberVarName)
    ${spaces}{
#if($memberEntry.value.shape.listMember.shape.enum)
    ${spaces}  ss << ${memberEntry.value.shape.listMember.shape.name}Mapper::GetNameFor${memberEntry.value.shape.listMember.shape.name}(item);
#else
    ${spaces}  ss << item;
#end
    ${spaces}  uri.AddQueryStringParameter("${memberEntry.value.locationName}", ss.str());
    ${spaces}  ss.str("");
    ${spaces}}
#else
    ${spaces}ss << ${memberVarName};
    ${spaces}uri.AddQueryStringParameter("${memberEntry.value.locationName}", ss.str());
    ${spaces}ss.str("");
#end
#if(!$memberEntry.value.required)
    }

#end
#end
#end
#if($shape.customizedQuery)
    if(!${CppViewHelper.computeMemberVariableName($shape.customizedQuery.shape.name)}.empty())
    {
        // only accept customized LogTag which starts with "x-"
        Aws::Map<Aws::String, Aws::String> collectedLogTags;
        for(const auto& entry: $CppViewHelper.computeMemberVariableName($shape.customizedQuery.shape.name))
        {
            if (!entry.first.empty() && !entry.second.empty() && entry.first.substr(0, 2) == "x-")
            {
                collectedLogTags.emplace(entry.first, entry.second);
            }
        }

        if (!collectedLogTags.empty())
        {
            uri.AddQueryStringParameter(collectedLogTags);
        }
    }
#end
}