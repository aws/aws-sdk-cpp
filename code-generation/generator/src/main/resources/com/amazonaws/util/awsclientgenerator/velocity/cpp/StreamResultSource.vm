#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#set($metadata = $serviceModel.metadata)
\#include <aws/${metadata.projectName}/model/${typeInfo.className}.h>
\#include <aws/core/AmazonWebServiceResult.h>
\#include <aws/core/utils/StringUtils.h>
#foreach($header in $typeInfo.sourceIncludes)
\#include $header
#end

\#include <utility>

using namespace Aws::${metadata.namespace}::Model;
using namespace Aws::Utils::Stream;
using namespace Aws::Utils;
using namespace Aws;

#set($useRequiredField = false)
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ModelClassMembersGenerateInitializers.vm")
${typeInfo.className}::${typeInfo.className}()$initializers
{
}

#set($useRequiredField = false)
#set($container = "toMove")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ModelClassMembersGenerateMoveInitializers.vm")
${typeInfo.className}::${typeInfo.className}(${typeInfo.className}&& toMove)$moveInitializers
{
}

${typeInfo.className}& ${typeInfo.className}::operator=(${typeInfo.className}&& toMove)
{
   if(this == &toMove)
   {
      return *this;
   }

#foreach($memberEntry in $shape.members.entrySet())
#set($memberVarName = $CppViewHelper.computeMemberVariableName($memberEntry.key))
#if($memberEntry.value.shape.primitive || $memberEntry.value.shape.enum)
   ${memberVarName} = toMove.${memberVarName};
#else
   ${memberVarName} = std::move(toMove.${memberVarName});
#end
#end

   return *this;
}

${typeInfo.className}::${typeInfo.className}(AmazonWebServiceResult<ResponseStream>&& result)$initializers
{
  *this = std::move(result);
}

${typeInfo.className}& ${typeInfo.className}::operator =(AmazonWebServiceResult<ResponseStream>&& result)
{
  ${CppViewHelper.computeMemberVariableName($shape.payload)} = result.TakeOwnershipOfPayload();

#if($shape.hasHeaderMembers())
  const auto& headers = result.GetHeaderValueCollection();
#foreach($memberEntry in $shape.members.entrySet())
#set($varName = $CppViewHelper.computeVariableName($memberEntry.key))
#set($memberVarName = $CppViewHelper.computeMemberVariableName($memberEntry.key))
#if($memberEntry.value.usedForHeader)
#if($memberEntry.value.shape.map)
  std::size_t prefixSize = sizeof("${memberEntry.value.locationName}") - 1; //subtract the NULL terminator out
  for(const auto& item : headers)
  {
    std::size_t foundPrefix = item.first.find("${memberEntry.value.locationName}");

    if(foundPrefix != std::string::npos)
    {
      ${memberVarName}[item.first.substr(prefixSize)] = item.second;
    }
  }

#else
  const auto& ${varName}Iter = headers.find("${memberEntry.value.locationName}");
  if(${varName}Iter != headers.end())
  {
#if($memberEntry.value.shape.string)
    ${memberVarName} = ${varName}Iter->second;
#elseif($memberEntry.value.shape.enum)
    ${memberVarName} = ${memberEntry.value.shape.name}Mapper::Get${memberEntry.value.shape.name}ForName(${varName}Iter->second);
#elseif($memberEntry.value.shape.timeStamp)
    ${memberVarName} = DateTime(${varName}Iter->second, DateFormat::RFC822);
#elseif($memberEntry.value.shape.blob)
    ${memberVarName} = HashingUtils::Base64Decode(StringUtils::Trim(${varName}Iter->second.c_str()));
#elseif($memberEntry.value.shape.primitive)
     ${memberVarName} = ${CppViewHelper.computeXmlConversionMethodName($memberEntry.value.shape)}(${varName}Iter->second.c_str());
#end
  }

#end
#end
#end
#end
#if($shape.hasStatusCodeMembers())
#foreach($memberEntry in $shape.members.entrySet())
#if($memberEntry.value.usedForHttpStatusCode)
  ${CppViewHelper.computeMemberVariableName($memberEntry.key)} = static_cast<int>(result.GetResponseCode());

#end
#end
#end
   return *this;
}
