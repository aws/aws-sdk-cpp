#set($metadata = $serviceModel.metadata)
#set($projectNameCaps = $metadata.projectName.toUpperCase())
cmake_minimum_required(VERSION 2.8.12)
set(PROJECT_NAME aws-cpp-sdk-${metadata.projectName})
set(PROJECT_STRING    "${PROJECT_NAME}_${PROJECT_VERSION}")
set(PROJECT_DESCRIPTION "C++ interface for Amazon ${projectNameCaps}")
set(PROJECT_TARNAME   "${PROJECT_NAME}-${PROJECT_VERSION}")
set(PROJECT_LIBS "")

cmake_policy(SET CMP0028 NEW)
cmake_policy(SET CMP0048 NEW)
cmake_policy(SET CMP0054 NEW)
cmake_policy(SET CMP0056 NEW)

project("${PROJECT_NAME}" VERSION "${PROJECT_VERSION}" LANGUAGES CXX)

list(APPEND PROJECT_LIBS "AWS::aws-cpp-sdk-core")

file(GLOB AWS_${projectNameCaps}_HEADERS
  "include/aws/${metadata.projectName}/*.h"
)

file(GLOB AWS_${projectNameCaps}_MODEL_HEADERS
  "include/aws/${metadata.projectName}/model/*.h"
)

file(GLOB AWS_${projectNameCaps}_SOURCE
  "source/*.cpp"
)

file(GLOB AWS_${projectNameCaps}_MODEL_SOURCE
  "source/model/*.cpp"
)

#set($cmakeVarStart = "${")
file(GLOB ${projectNameCaps}_UNIFIED_HEADERS
  ${cmakeVarStart}AWS_${projectNameCaps}_HEADERS}
  ${cmakeVarStart}AWS_${projectNameCaps}_MODEL_HEADERS}
)

file(GLOB ${projectNameCaps}_UNITY_SRC
  ${cmakeVarStart}AWS_${projectNameCaps}_SOURCE}
  ${cmakeVarStart}AWS_${projectNameCaps}_MODEL_SOURCE}
)

if(ENABLE_UNITY_BUILD)
  enable_unity_build("${projectNameCaps}" ${projectNameCaps}_UNITY_SRC)
endif()

file(GLOB ${projectNameCaps}_SRC
  ${cmakeVarStart}${projectNameCaps}_UNIFIED_HEADERS}
  ${cmakeVarStart}${projectNameCaps}_UNITY_SRC}
)

#set($dirDelim = "\\")
if(WIN32)
  \#if we are compiling for visual studio, create a sane directory tree.
  if(MSVC)
    source_group("Header Files${dirDelim}aws${dirDelim}${metadata.projectName}" FILES ${cmakeVarStart}AWS_${projectNameCaps}_HEADERS})
    source_group("Header Files${dirDelim}aws${dirDelim}${metadata.projectName}${dirDelim}model" FILES ${cmakeVarStart}AWS_${projectNameCaps}_MODEL_HEADERS})
    source_group("Source Files" FILES ${cmakeVarStart}AWS_${projectNameCaps}_SOURCE})
    source_group("Source Files${dirDelim}model" FILES ${cmakeVarStart}AWS_${projectNameCaps}_MODEL_SOURCE})
  endif(MSVC)
endif()

set(${projectNameCaps}_INCLUDES
  "${cmakeVarStart}CMAKE_CURRENT_SOURCE_DIR}/include/"
)

include_directories(${cmakeVarStart}${projectNameCaps}_INCLUDES})

if(USE_WINDOWS_DLL_SEMANTICS AND BUILD_SHARED_LIBS)
  add_definitions("-DAWS_${metadata.classNamePrefix.toUpperCase()}_EXPORTS")
endif()

add_library(${PROJECT_NAME} ${cmakeVarStart}LIBTYPE} ${cmakeVarStart}${projectNameCaps}_SRC})
add_library(AWS::${PROJECT_NAME} ALIAS ${PROJECT_NAME})

target_include_directories(${PROJECT_NAME} PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)

target_link_libraries(${PROJECT_NAME} ${PROJECT_LIBS})

configure_file("${CMAKE_SOURCE_DIR}/toolchains/pkg-config.pc.in" "${PROJECT_NAME}.pc" @ONLY)

if(SIMPLE_INSTALL)
    install (TARGETS ${PROJECT_NAME}
             EXPORT "${PROJECT_NAME}-targets"
             ARCHIVE DESTINATION ${ARCHIVE_DIRECTORY}
             LIBRARY DESTINATION ${LIBRARY_DIRECTORY}
             RUNTIME DESTINATION ${BINARY_DIRECTORY})
    if (BUILD_SHARED_LIBS)
        install(
            FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc"
            DESTINATION ${LIBRARY_DIRECTORY}/pkgconfig)
    endif()
else()
  if(PLATFORM_CUSTOM)
    install_custom_library(${PROJECT_NAME})
  else()
    install (TARGETS ${PROJECT_NAME}
             EXPORT "${PROJECT_NAME}-targets"
             ARCHIVE DESTINATION ${ARCHIVE_DIRECTORY}/${SDK_INSTALL_BINARY_PREFIX}/${PLATFORM_INSTALL_QUALIFIER}/\${CMAKE_INSTALL_CONFIG_NAME}
             LIBRARY DESTINATION ${LIBRARY_DIRECTORY}/${SDK_INSTALL_BINARY_PREFIX}/${PLATFORM_INSTALL_QUALIFIER}/\${CMAKE_INSTALL_CONFIG_NAME}
             RUNTIME DESTINATION ${BINARY_DIRECTORY}/${SDK_INSTALL_BINARY_PREFIX}/${PLATFORM_INSTALL_QUALIFIER}/\${CMAKE_INSTALL_CONFIG_NAME})
  endif()
endif()

install (FILES ${cmakeVarStart}AWS_${projectNameCaps}_HEADERS} DESTINATION ${INCLUDE_DIRECTORY}/aws/${metadata.projectName})
install (FILES ${cmakeVarStart}AWS_${projectNameCaps}_MODEL_HEADERS} DESTINATION ${INCLUDE_DIRECTORY}/aws/${metadata.projectName}/model)

if(PLATFORM_WINDOWS AND MSVC)
  install (FILES nuget/${PROJECT_NAME}.autopkg DESTINATION nuget)
endif()

include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake"
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY AnyNewerVersion
)

export(EXPORT "${PROJECT_NAME}-targets"
    FILE "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-targets.cmake"
    NAMESPACE AWS::
)

configure_file(
    "${CMAKE_SOURCE_DIR}/toolchains/cmakeProjectConfig.cmake"
    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
    @ONLY)

set(ConfigPackageLocation "${LIBRARY_DIRECTORY}/cmake/${PROJECT_NAME}")
install(EXPORT "${PROJECT_NAME}-targets"
    FILE "${PROJECT_NAME}-targets.cmake"
    NAMESPACE AWS::
    DESTINATION ${ConfigPackageLocation}
)

install(
    FILES
      "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
      "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake"
    DESTINATION
      ${ConfigPackageLocation}
    COMPONENT
      Devel)
