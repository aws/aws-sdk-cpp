#set($metadata = $serviceModel.metadata)
cmake_minimum_required(VERSION 2.6)
project(aws-cpp-sdk-${metadata.projectName})

#set($projectNameCaps = $metadata.projectName.toUpperCase())
  file(GLOB AWS_${projectNameCaps}_HEADERS
    "include/aws/${metadata.projectName}/*.h"
  )

  file(GLOB AWS_${projectNameCaps}_MODEL_HEADERS
    "include/aws/${metadata.projectName}/model/*.h"
  )

  file(GLOB AWS_${projectNameCaps}_SOURCE
    "source/*.cpp"
  )

  file(GLOB AWS_${projectNameCaps}_MODEL_SOURCE
    "source/model/*.cpp"
  )

#set($cmakeVarStart = "${")
  file(GLOB ${projectNameCaps}_SRC
    ${cmakeVarStart}AWS_${projectNameCaps}_HEADERS}
    ${cmakeVarStart}AWS_${projectNameCaps}_MODEL_HEADERS}
    ${cmakeVarStart}AWS_${projectNameCaps}_SOURCE}
    ${cmakeVarStart}AWS_${projectNameCaps}_MODEL_SOURCE}
  )

#set($dirDelim = "\\")
  if(WIN32)
    \#if we are compiling for visual studio, create a sane directory tree.
    if(MSVC)
      source_group("Header Files${dirDelim}aws${dirDelim}${metadata.projectName}" FILES ${cmakeVarStart}AWS_${projectNameCaps}_HEADERS})
      source_group("Header Files${dirDelim}aws${dirDelim}${metadata.projectName}${dirDelim}model" FILES ${cmakeVarStart}AWS_${projectNameCaps}_MODEL_HEADERS})
      source_group("Source Files" FILES ${cmakeVarStart}AWS_${projectNameCaps}_SOURCE})
      source_group("Source Files${dirDelim}model" FILES ${cmakeVarStart}AWS_${projectNameCaps}_MODEL_SOURCE})
    endif(MSVC)
  endif()

  set(${projectNameCaps}_INCLUDES
    "${cmakeVarStart}CMAKE_CURRENT_SOURCE_DIR}/include/"
    "${cmakeVarStart}CORE_DIR}/include/"
  )

  include_directories(${cmakeVarStart}${projectNameCaps}_INCLUDES})

  if(MSVC AND BUILD_SHARED_LIBS)
    add_definitions("-DAWS_${metadata.classNamePrefix.toUpperCase()}_EXPORTS")
  endif()

  add_library(aws-cpp-sdk-${metadata.projectName} ${cmakeVarStart}LIBTYPE} ${cmakeVarStart}${projectNameCaps}_SRC})
  target_link_libraries(aws-cpp-sdk-${metadata.projectName} aws-cpp-sdk-core)

  if(NOT MSVC)
    add_definitions(-std=c++11)
  endif()

  #uncomment when unit tests are automatically generated
  #add_test(run${metadata.namespace}Tests run${metadata.namespace}Tests)

  install (TARGETS aws-cpp-sdk-${metadata.projectName}
           ARCHIVE DESTINATION ${ARCHIVE_DIRECTORY}/${SDK_INSTALL_BINARY_PREFIX}/\${CMAKE_INSTALL_CONFIG_NAME}
           LIBRARY DESTINATION lib/${SDK_INSTALL_BINARY_PREFIX}/\${CMAKE_INSTALL_CONFIG_NAME}
           RUNTIME DESTINATION bin/${SDK_INSTALL_BINARY_PREFIX}/\${CMAKE_INSTALL_CONFIG_NAME})

  install (FILES ${cmakeVarStart}AWS_${projectNameCaps}_HEADERS} DESTINATION include/aws/${metadata.projectName})
  install (FILES ${cmakeVarStart}AWS_${projectNameCaps}_MODEL_HEADERS} DESTINATION include/aws/${metadata.projectName}/model)

