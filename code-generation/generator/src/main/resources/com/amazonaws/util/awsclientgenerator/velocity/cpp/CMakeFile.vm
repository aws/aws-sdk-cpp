#set($metadata = $serviceModel.metadata)
add_project(aws-cpp-sdk-${metadata.projectName} "C++ SDK for the AWS ${metadata.projectName} service" aws-cpp-sdk-core)

#set($projectNameCaps = $metadata.projectName.toUpperCase())
file(GLOB AWS_${projectNameCaps}_HEADERS
    "include/aws/${metadata.projectName}/*.h"
)

file(GLOB AWS_${projectNameCaps}_MODEL_HEADERS
    "include/aws/${metadata.projectName}/model/*.h"
)

file(GLOB AWS_${projectNameCaps}_SOURCE
    "source/*.cpp"
)

file(GLOB AWS_${projectNameCaps}_MODEL_SOURCE
    "source/model/*.cpp"
)

#set($cmakeVarStart = "${")
file(GLOB ${projectNameCaps}_UNIFIED_HEADERS
    ${cmakeVarStart}AWS_${projectNameCaps}_HEADERS}
    ${cmakeVarStart}AWS_${projectNameCaps}_MODEL_HEADERS}
)

file(GLOB ${projectNameCaps}_UNITY_SRC
    ${cmakeVarStart}AWS_${projectNameCaps}_SOURCE}
    ${cmakeVarStart}AWS_${projectNameCaps}_MODEL_SOURCE}
)

if(ENABLE_UNITY_BUILD)
    enable_unity_build("${projectNameCaps}" ${projectNameCaps}_UNITY_SRC)
endif()

file(GLOB ${projectNameCaps}_SRC
    ${cmakeVarStart}${projectNameCaps}_UNIFIED_HEADERS}
    ${cmakeVarStart}${projectNameCaps}_UNITY_SRC}
)

#set($dirDelim = "\\")
if(WIN32)
    \#if we are compiling for visual studio, create a sane directory tree.
    if(MSVC)
        source_group("Header Files${dirDelim}aws${dirDelim}${metadata.projectName}" FILES ${cmakeVarStart}AWS_${projectNameCaps}_HEADERS})
        source_group("Header Files${dirDelim}aws${dirDelim}${metadata.projectName}${dirDelim}model" FILES ${cmakeVarStart}AWS_${projectNameCaps}_MODEL_HEADERS})
        source_group("Source Files" FILES ${cmakeVarStart}AWS_${projectNameCaps}_SOURCE})
        source_group("Source Files${dirDelim}model" FILES ${cmakeVarStart}AWS_${projectNameCaps}_MODEL_SOURCE})
    endif(MSVC)
endif()

set(${projectNameCaps}_INCLUDES
    "${cmakeVarStart}CMAKE_CURRENT_SOURCE_DIR}/include/"
)

include_directories(${cmakeVarStart}${projectNameCaps}_INCLUDES})

if(USE_WINDOWS_DLL_SEMANTICS AND BUILD_SHARED_LIBS)
    add_definitions("-DAWS_${metadata.classNamePrefix.toUpperCase()}_EXPORTS")
endif()

add_library(${PROJECT_NAME} ${cmakeVarStart}LIBTYPE} ${cmakeVarStart}${projectNameCaps}_SRC})
add_library(AWS::${PROJECT_NAME} ALIAS ${PROJECT_NAME})

target_include_directories(${PROJECT_NAME} PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>)
  
target_link_libraries(${PROJECT_NAME} ${PROJECT_LIBS})

setup_install()

install (FILES ${cmakeVarStart}AWS_${projectNameCaps}_HEADERS} DESTINATION ${INCLUDE_DIRECTORY}/aws/${metadata.projectName})
install (FILES ${cmakeVarStart}AWS_${projectNameCaps}_MODEL_HEADERS} DESTINATION ${INCLUDE_DIRECTORY}/aws/${metadata.projectName}/model)

if(PLATFORM_WINDOWS AND MSVC)
    install (FILES nuget/${PROJECT_NAME}.autopkg DESTINATION nuget)
endif()

do_packaging()


