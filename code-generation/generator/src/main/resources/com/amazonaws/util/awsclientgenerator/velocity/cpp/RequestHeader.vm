#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#pragma once
#set($metadata = $serviceModel.metadata)
#set($rootNamespace = $serviceModel.namespace)
#set($serviceNamespace = $metadata.namespace)
#set($exportMacro = $typeInfo.exportValue)
\#include <aws/${metadata.projectName}/${metadata.classNamePrefix}_EXPORTS.h>
\#include <aws/${metadata.projectName}/${metadata.classNamePrefix}Request.h>
#if($operation.result.shape.hasEventStreamMembers())
\#include <aws/${metadata.projectName}/model/${operation.name}Handler.h>
\#include <aws/core/utils/event/EventStreamDecoder.h>
#end
#if($operation.request.shape.hasEventStreamMembers())
\#include <memory>
#end
#foreach($header in $typeInfo.headerIncludes)
\#include $header
#end

namespace Aws
{
#if($shape.hasQueryStringMembers())
namespace Http
{
    class URI;
} //namespace Http
#end
#if ($rootNamespace != "Aws")
} // namespace Aws
namespace ${rootNamespace}
{
#end
namespace ${serviceNamespace}
{
namespace Model
{
#set($jsonRef = "${typeInfo.jsonType}&")
#set($classNameRef = "${typeInfo.className}&")

  /**
#if($shape.documentation)
   * $shape.documentation
#end
   */
  class ${typeInfo.className} : public ${typeInfo.baseClass}
  {
  public:
    ${exportMacro} ${typeInfo.className}();

    // Service request name is the Operation name which will send this request out,
    // each operation should has unique request name, so that we can get operation's name from this request.
    // Note: this is not true for response, multiple operations may have the same response name,
    // so we can not get operation's name from response.
    inline virtual const char* GetServiceRequestName() const override { return "${operationName}"; }

#if($shape.hasEventStreamMembers())
    inline virtual bool IsEventStreamRequest() const override { return true; }
#end
#if(!$shape.hasStreamMembers() && !$shape.hasEventStreamMembers())
    ${exportMacro} Aws::String SerializePayload() const override;

#elseif($shape.hasEventStreamMembers())
    // SerializePayload will not be invoked.
    // This request is sent by encoding its data in event-streams which is sent as IOStream via GetBody()
    ${exportMacro} Aws::String SerializePayload() const override { return {}; }
    ${exportMacro} std::shared_ptr<Aws::IOStream> GetBody() const override;
#end
#if($shape.hasQueryStringMembers())
    ${exportMacro} void AddQueryStringParameters(Aws::Http::URI& uri) const override;

#end
#if($shape.hasHeaderMembers() || $metadata.targetPrefix)
    ${exportMacro} Aws::Http::HeaderValueCollection GetRequestSpecificHeaders() const override;

#end
#if($shape.hasEmbeddedErrors())
    ${exportMacro} bool HasEmbeddedError(IOStream &body, const Http::HeaderValueCollection &header) const override;
#end
#if($operation.requestAlgorithmMember)
    ${exportMacro} Aws::String GetChecksumAlgorithmName() const override;

#end
#if($operation.requestValidationModeMember)
    ${exportMacro} bool ShouldValidateResponseChecksum() const override;

#end
#if($operation.responseAlgorithms)
    ${exportMacro} Aws::Vector<Aws::String> GetResponseChecksumAlgorithmNames() const override;

#end
#if($shape.computeContentMd5)
    ${exportMacro} inline bool ShouldComputeContentMd5() const override { return true; }

#end
#if(!$shape.signBody && $shape.members.size() > 0)
    ${exportMacro} bool SignBody() const override { return false; }

#end
#if ($metadata.serviceId.equals("MediaStore Data") || $operation.supportsChunkedEncoding)
#set($supportsChunkedEncoding = true)
#else
#set($supportsChunkedEncoding = false)
#end
#if($shape.hasStreamMembers() && !$shape.signBody && $shape.members.size() > 0 && $supportsChunkedEncoding)
    ${exportMacro} bool IsChunked() const override { return true; }

#end
#if($operation.result.shape.hasEventStreamMembers())
    /**
     * Underlying Event Stream Decoder.
     */
    inline Aws::Utils::Event::EventStreamDecoder& GetEventStreamDecoder() { return m_decoder; }

    /**
     * Underlying Event Stream Handler which is used to define callback functions.
     */
    inline const ${operation.name}Handler& GetEventStreamHandler() const { return m_handler; }

    /**
     * Underlying Event Stream Handler which is used to define callback functions.
     */
    inline void SetEventStreamHandler(const ${operation.name}Handler& value) { m_handler = value; m_decoder.ResetEventStreamHandler(&m_handler); }

    /**
     * Underlying Event Stream Handler which is used to define callback functions.
     */
    inline ${operation.name}Request& WithEventStreamHandler(const ${operation.name}Handler& value) { SetEventStreamHandler(value); return *this; }

#end
#if($shape.supportsPresigning)
  protected:
    ${exportMacro} void DumpBodyToUrl(Aws::Http::URI& uri ) const override;

  public:
#end
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/common/model/ModelGetEndpointRulesContextParamDeclaration.vm")
#set($useRequiredField = true)
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ModelClassMembersAndInlines.vm")
  };

} // namespace Model
} // namespace ${serviceNamespace}
} // namespace ${rootNamespace}
