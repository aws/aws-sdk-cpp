#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#set($metadata = $serviceModel.metadata)
#set($rootNamespace = $serviceModel.namespace)
#set($serviceNamespace = $metadata.namespace)
#set($endpointPrefix = $metadata.endpointPrefix)
\#include <aws/${metadata.projectName}/${metadata.classNamePrefix}Endpoint.h>
\#include <aws/core/utils/memory/stl/AWSStringStream.h>
\#include <aws/core/utils/HashingUtils.h>

using namespace Aws;
using namespace ${rootNamespace}::${serviceNamespace};

namespace ${rootNamespace}
{
namespace ${serviceNamespace}
{
namespace ${metadata.classNamePrefix}Endpoint
{
#if(!$metadata.globalEndpoint)
  static const int CN_NORTH_1_HASH = Aws::Utils::HashingUtils::HashString("cn-north-1");
  static const int CN_NORTHWEST_1_HASH = Aws::Utils::HashingUtils::HashString("cn-northwest-1");
  static const int US_ISO_EAST_1_HASH = Aws::Utils::HashingUtils::HashString("us-iso-east-1");
  static const int US_ISOB_EAST_1_HASH = Aws::Utils::HashingUtils::HashString("us-isob-east-1");
#end

#foreach($regionEndpointPair in $endpointMapping.entrySet())
#set($customizedRegion = $regionEndpointPair.key)
#if ($metadata.globalEndpoint || !($customizedRegion.equals("cn-north-1") || $customizedRegion.equals("cn-northwest-1") || $customizedRegion.equals("us-iso-east-1") || $customizedRegion.equals("us-isob-east-1")))
  static const int ${regionEndpointPair.key.toUpperCase().replace("-", "_")}_HASH = Aws::Utils::HashingUtils::HashString("${regionEndpointPair.key}");
#end
#end

  Aws::String ForRegion(const Aws::String& regionName, bool useDualStack)
  {
#if($metadata.globalEndpoint)
#if($endpointMapping.isEmpty())
    AWS_UNREFERENCED_PARAM(regionName);
    AWS_UNREFERENCED_PARAM(useDualStack);
    return "${metadata.globalEndpoint}";
#else
    auto hash = Aws::Utils::HashingUtils::HashString(regionName.c_str());

    if(!useDualStack)
    {
#foreach($regionEndpointPair in $endpointMapping.entrySet())
      if(hash == ${regionEndpointPair.key.toUpperCase().replace("-", "_")}_HASH)
      {
        return "${regionEndpointPair.value}";
      }
#end
    }
    return "${metadata.globalEndpoint}";
#end##end if endpoint mapping
#else##no global endpoint means standard endpoints calculation except for special regions
    // Fallback to us-east-1 if global endpoint does not exists.
    Aws::String region = regionName == Aws::Region::AWS_GLOBAL ? Aws::Region::US_EAST_1 : regionName;
    auto hash = Aws::Utils::HashingUtils::HashString(region.c_str());

#if(!$endpointMapping.isEmpty())
    if(!useDualStack)
    {
#foreach($regionEndpointPair in $endpointMapping.entrySet())
      if(hash == ${regionEndpointPair.key.toUpperCase().replace("-", "_")}_HASH)
      {
        return "${regionEndpointPair.value}";
      }
#end
    }
#end
    Aws::StringStream ss;
    ss << "${endpointPrefix}" << ".";

    if(useDualStack)
    {
      ss << "dualstack.";
    }

    ss << region;

    if (hash == CN_NORTH_1_HASH || hash == CN_NORTHWEST_1_HASH)
    {
      ss << ".amazonaws.com.cn";
    }
    else if (hash == US_ISO_EAST_1_HASH)
    {
      ss << ".c2s.ic.gov";
    }
    else if (hash == US_ISOB_EAST_1_HASH)
    {
      ss << ".sc2s.sgov.gov";
    }
    else
    {
      ss << ".amazonaws.com";
    }

    return ss.str();
#end
  }

} // namespace ${metadata.classNamePrefix}Endpoint
} // namespace ${serviceNamespace}
} // namespace ${rootNamespace}

