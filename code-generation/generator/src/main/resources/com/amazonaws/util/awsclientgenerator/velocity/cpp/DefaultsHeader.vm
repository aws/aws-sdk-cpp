#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

/**
 * Please note that this file is autogenerated.
 * The backwards compatibility of the default values provided by new client configuration defaults is not guaranteed; 
 *   the values might change over time.
 */

#pragma once

#set($metadata = $defaultsModel.metadata)
#set($rootNamespace = $defaultsModel.namespace)
#set($defaultsNamespace = $metadata.namespace)
\#include <aws/core/client/ClientConfiguration.h>

namespace Aws
{
    namespace Config
    {
        namespace Defaults
        {
            /** 
             * Set default client configuration parameters per provided default mode
             *
             * @param clientConfig, a ClientConfiguration to update
             * @param defaultMode, requested default mode name
             * @param hasEc2MetadataRegion, if ec2 metadata region has been already queried
             * @param ec2MetadataRegion, a region resolved by EC2 Instance Metadata service
             */
            AWS_CORE_API void SetSmartDefaultsConfigurationParameters(Aws::Client::ClientConfiguration& clientConfig,
                                                                      const Aws::String& defaultMode,
                                                                      bool hasEc2MetadataRegion,
                                                                      const Aws::String& ec2MetadataRegion);

            /**
             * Resolve the name of an actual mode for a default mode "auto"
             *
#foreach($defaultMode in $defaultsModel.defaultsModes)
#if ($defaultMode.name == "auto")
#foreach($docStr in $defaultMode.documentation.split($nl))
             *#if(!$docStr.isEmpty()) #end${docStr}
#end
#end
#end
             */
            AWS_CORE_API const char* ResolveAutoClientConfiguration(const Aws::Client::ClientConfiguration& clientConfig,
                                                                    const Aws::String& ec2MetadataRegion);

#foreach($defaultMode in $defaultsModel.defaultsModes)
#if ($defaultMode.name != "auto")
#set($defaultModeNameCamel = "")
#foreach($tmpStr in $defaultMode.name.split("-"))
#set($defaultModeNameCamel = $defaultModeNameCamel+$tmpStr.substring(0,1).toUpperCase()+$tmpStr.substring(1))
#end
            /**
             * Default mode "${defaultMode.name}"
             *
#foreach($docStr in $defaultMode.documentation.split($nl))
             *#if(!$docStr.isEmpty()) #end${docStr}
#end
             */
            AWS_CORE_API void Set${defaultModeNameCamel}ClientConfiguration(Aws::Client::ClientConfiguration& clientConfig);
#if( $foreach.hasNext )

#end
#end
#end

            /** 
             * Internal helper function to resolve smart defaults mode if not provided
             *
             * @param clientConfig, a ClientConfiguration to update
             * @param requestedDefaultMode, requested default mode name
             * @param configFileDefaultMode, default mode specified in a config file
             * @param hasEc2MetadataRegion, if ec2 metadata region has been already queried
             * @param ec2MetadataRegion, a region resolved by EC2 Instance Metadata service
             */
            AWS_CORE_API Aws::String ResolveDefaultModeName(const Aws::Client::ClientConfiguration& clientConfig,
                                                            Aws::String requestedDefaultMode,
                                                            const Aws::String& configFileDefaultMode,
                                                            bool hasEc2MetadataRegion,
                                                            Aws::String ec2MetadataRegion);
        } //namespace Defaults
    } //namespace Config
} //namespace Aws
