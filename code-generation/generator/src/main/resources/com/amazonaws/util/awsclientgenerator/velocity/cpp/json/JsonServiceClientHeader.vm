#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#set($metadata = $serviceModel.metadata)
#set($rootNamespace = $serviceModel.namespace)
#set($serviceNamespace = $metadata.namespace)
#set($className = "${metadata.classNamePrefix}Client")
#pragma once
\#include <aws/$metadata.projectName/${metadata.classNamePrefix}_EXPORTS.h>
\#include <aws/core/client/ClientConfiguration.h>
\#include <aws/core/client/AWSClient.h>
\#include <aws/core/utils/json/JsonSerializer.h>
\#include <aws/$metadata.projectName/${metadata.classNamePrefix}ServiceClientModel.h>

namespace ${rootNamespace}
{
namespace ${serviceNamespace}
{
#if($serviceModel.documentation)
  /**
   * ${serviceModel.documentation}
   */
#end
#set($finalClass = " final")
#if($serviceModel.enableVirtualOperations)
#set($finalClass = "")
#end
  class ${CppViewHelper.computeExportValue($metadata.classNamePrefix)} ${className}${finalClass} : public Aws::Client::AWSJsonClient
  {
    public:
      typedef Aws::Client::AWSJsonClient BASECLASS;
      static const char* SERVICE_NAME;
      static const char* ALLOCATION_TAG;

#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientHeaderConstructors.vm")

#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientHeaderOperations.vm")

      void OverrideEndpoint(const Aws::String& endpoint);
    private:
      void init(const Aws::Client::ClientConfiguration& clientConfiguration);
#if($metadata.hasEndpointDiscoveryTrait && !$serviceModel.endpointRules)
      void Load${metadata.classNamePrefix}SpecificConfig(const Aws::Client::ClientConfiguration& clientConfiguration);
#end

#if(!$serviceModel.endpointRules)
#if($metadata.hasEndpointTrait)
      Aws::String m_baseUri;
      Aws::String m_scheme;
      bool m_enableHostPrefixInjection = false;
#else
      Aws::String m_uri;
#end
#if($customEndpointUsed)
      bool m_useCustomEndpoint = false;
#end
#end
#if($metadata.hasEndpointDiscoveryTrait)
      mutable Aws::Utils::ConcurrentCache<Aws::String, Aws::String> m_endpointsCache;
      bool m_enableEndpointDiscovery = false;
#end
#if(!$serviceModel.endpointRules)
      Aws::String m_configScheme;
#end
      std::shared_ptr<Aws::Utils::Threading::Executor> m_executor;
#if($serviceModel.endpointRules)
      std::shared_ptr<Endpoint::${metadata.classNamePrefix}EndpointProvider> m_endpointProvider;
#end
  };

} // namespace ${serviceNamespace}
} // namespace ${rootNamespace}
