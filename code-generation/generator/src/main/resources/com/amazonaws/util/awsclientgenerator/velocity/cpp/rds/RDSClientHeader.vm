#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#set($metadata = $serviceModel.metadata)
#pragma once
\#include <aws/$metadata.projectName/${metadata.classNamePrefix}_EXPORTS.h>
\#include <aws/$metadata.projectName/${metadata.classNamePrefix}Errors.h>
\#include <aws/core/client/AWSError.h>
\#include <aws/core/client/ClientConfiguration.h>
\#include <aws/core/AmazonSerializableWebServiceRequest.h>
\#include <aws/core/client/AWSClient.h>
\#include <aws/core/utils/memory/stl/AWSString.h>
\#include <aws/core/utils/xml/XmlSerializer.h>
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientHeaderModelIncludes.vm")
\#include <aws/core/client/AsyncCallerContext.h>
\#include <aws/core/http/HttpTypes.h>
#if($metadata.hasEndpointDiscoveryTrait)
\#include <aws/core/utils/ConcurrentCache.h>
#end
\#include <future>
\#include <functional>

namespace Aws
{
    namespace Http
    {
        class HttpClient;
        class HttpClientFactory;
    } // namespace Http

    namespace Utils
    {
        template< typename R, typename E> class Outcome;

        namespace Threading
        {
            class Executor;
        } // namespace Threading

        namespace Xml
        {
            class XmlDocument;
        } // namespace Xml
    } // namespace Utils

    namespace Auth
    {
        class AWSCredentials;
        class AWSCredentialsProvider;
    } // namespace Auth

    namespace Client
    {
        class RetryStrategy;
    } // namespace Client

    namespace ${metadata.namespace}
    {
    namespace Model
    {
    #parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientHeaderModelDeclarations.vm")
    } // namespace Model

    #set($className = "${metadata.classNamePrefix}Client")
    class ${className};

    #parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientHeaderEventTypeDeclarations.vm")

    #if($serviceModel.documentation)
    /**
     * ${serviceModel.documentation}
     */
    #end
    #set($finalClass = " final")
    #if($serviceModel.enableVirtualOperations)
    #set($finalClass = "")
    #end
    class ${CppViewHelper.computeExportValue($metadata.classNamePrefix)} ${className}$finalClass : public Aws::Client::AWSXMLClient
    {
    public:
    typedef Aws::Client::AWSXMLClient BASECLASS;

    #parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientHeaderConstructors.vm")

    #if($metadata.protocol == "query")

        /**
        * Converts any request object to a presigned URL with the GET method, using region for the signer and a timeout of 15 minutes.
        */
        Aws::String ConvertRequestToPresignedUrl(const Aws::AmazonSerializableWebServiceRequest& requestToConvert, const char* region) const;

        /**
        * Generates an auth token for connecting to an rds instance.
        */
        Aws::String GenerateConnectAuthToken(const char* dbHostName, const char* dbRegion, unsigned port, const char* dbUserName) const;

    #end
    #parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientHeaderOperations.vm")

        void OverrideEndpoint(const Aws::String& endpoint);
    private:
        void init(const Aws::Client::ClientConfiguration& clientConfiguration);
#if($metadata.hasEndpointDiscoveryTrait)
        void Load${metadata.classNamePrefix}SpecificConfig(const Aws::Client::ClientConfiguration& clientConfiguration);
#end
    #parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientHeaderAsyncHelpers.vm")

#if($metadata.hasEndpointTrait)
        Aws::String m_baseUri;
        Aws::String m_scheme;
        bool m_enableHostPrefixInjection;
#else
        Aws::String m_uri;
#end
#if($metadata.hasEndpointDiscoveryTrait)
        mutable Aws::Utils::ConcurrentCache<Aws::String, Aws::String> m_endpointsCache;
        bool m_enableEndpointDiscovery;
#end
        Aws::String m_configScheme;
#if($metadata.hasPreSignedUrl)
        bool m_useDualStack;
#end
        std::shared_ptr<Aws::Utils::Threading::Executor> m_executor;
    };

    } // namespace ${metadata.namespace}
} // namespace Aws
