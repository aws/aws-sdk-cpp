#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#set($metadata = $serviceModel.metadata)
#set($rootNamespace = $serviceModel.namespace)
#set($serviceNamespace = $metadata.namespace)
#set($epProviderClassName = "${metadata.classNamePrefix}EndpointProvider")
#set($epContextClassName = "${metadata.classNamePrefix}ClientContextParameters")
#set($epBuiltInClassName = "${metadata.classNamePrefix}BuiltInParameters")
#pragma once
\#include <aws/${metadata.projectName}/${metadata.classNamePrefix}_EXPORTS.h>
\#include <aws/core/client/ClientConfiguration.h>
\#include <aws/core/endpoint/DefaultEndpointProvider.h>
\#include <aws/core/endpoint/EndpointParameter.h>
\#include <aws/core/utils/memory/stl/AWSString.h>
\#include <aws/core/utils/memory/stl/AWSVector.h>

#if($serviceModel.endpointRules)
\#include <aws/${metadata.projectName}/${metadata.classNamePrefix}EndpointRules.h>
#end


namespace ${rootNamespace}
{
namespace ${serviceNamespace}
{
namespace Endpoint
{
using EndpointParameters = Aws::Vector<Aws::Endpoint::EndpointParameter>;

#if ($serviceModel.endpointRules)
#if ($serviceModel.clientContextParams)
class ${epContextClassName} : public Aws::Endpoint::ClientContextParameters
{
public:
    virtual ~${epContextClassName}(){};

#foreach($memberEntry in $serviceModel.clientContextParams.entrySet())
    /**
    * ${memberEntry.value.documentation}
    */
#if(${memberEntry.value.type} == "boolean")
#set($paramType = "bool")
#else
#set($paramType = "Aws::String")
#end
    void Set${memberEntry.key}(${paramType} value);
    const ClientContextParameters::EndpointParameter& Get${memberEntry.key}() const;
#if( $foreach.hasNext )

#end
#end
};
#else##-#if ($serviceModel.clientContextParams)
using ${epContextClassName} = Aws::Endpoint::ClientContextParameters;
#end
using ${epBuiltInClassName} = Aws::Endpoint::ClientContextParameters;
class ${epProviderClassName};
using DefaultEndpointProviderT = Aws::Endpoint::DefaultEndpointProvider<${epProviderClassName},
                                                                        ${epBuiltInClassName},
                                                                        ${epContextClassName}>;


class ${epProviderClassName} : public DefaultEndpointProviderT
{
public:
    using ${metadata.classNamePrefix}ResolveEndpointOutcome = typename DefaultEndpointProviderT::ResolveEndpointOutcome;

    ${epProviderClassName}(const Client::ClientConfiguration& config = Client::ClientConfiguration())
      : DefaultEndpointProviderT(${rootNamespace}::${serviceNamespace}::${metadata.classNamePrefix}EndpointRules::Rules),
        clientConfiguration(config)
    {}

    ${metadata.classNamePrefix}ResolveEndpointOutcome ResolveEndpointImpl(const EndpointParameters& epParams) const
    {
        auto ResolveEndpointDefaultImpl =
            Aws::Endpoint::ResolveEndpointDefaultImpl<${epProviderClassName}>;

        return ResolveEndpointDefaultImpl(m_crtRuleEngine, m_builtInParameters.GetAllParameters(), m_clientContextParameters.GetAllParameters(), epParams);
    }

    ~${metadata.classNamePrefix}EndpointProvider()
    {
    }
protected:
    Client::ClientConfiguration clientConfiguration;
};
#end
} // namespace Endpoint
} // namespace ${serviceNamespace}
} // namespace ${rootNamespace}
