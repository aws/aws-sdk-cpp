#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/common/MacroParseOverrideOrDefault.vm")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#set($metadata = $serviceModel.metadata)
#set($rootNamespace = $serviceModel.namespace)
#set($serviceNamespace = $metadata.namespace)
#set($className = "${metadata.classNamePrefix}Client")
\#include <aws/core/utils/Outcome.h>
\#include <aws/core/auth/AWSAuthSigner.h>
\#include <aws/core/client/CoreErrors.h>
\#include <aws/core/client/RetryStrategy.h>
\#include <aws/core/http/HttpClient.h>
\#include <aws/core/http/HttpResponse.h>
\#include <aws/core/http/HttpClientFactory.h>
\#include <aws/core/auth/AWSCredentialsProviderChain.h>
\#include <aws/core/utils/xml/XmlSerializer.h>
\#include <aws/core/utils/memory/stl/AWSStringStream.h>
\#include <aws/core/utils/threading/Executor.h>
\#include <aws/core/utils/DNS.h>
\#include <aws/core/utils/logging/LogMacros.h>
#if($serviceModel.endpointRules)
\#include <aws/core/utils/logging/ErrorMacros.h>
#end
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientSourceHeaders.vm")

using namespace Aws;
using namespace Aws::Auth;
using namespace Aws::Client;
using namespace Aws::${metadata.namespace};
using namespace Aws::${metadata.namespace}::Model;
using namespace Aws::Http;
using namespace Aws::Utils::Xml;
#if($serviceModel.endpointRules)
using ResolveEndpointOutcome = Aws::Endpoint::ResolveEndpointOutcome;
#end


const char* ${className}::SERVICE_NAME = "${metadata.signingName}";
const char* ${className}::ALLOCATION_TAG = "${className}";

#parseOverrideOrDefault( "ServiceClientSourceInit_template" "com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientSourceInit.vm")

#foreach($operation in $serviceModel.operations)
${operation.name}Outcome ${className}::${operation.name}(const ${operation.request.shape.name}& request) const
{
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/common/ServiceClientOperationRequestRequiredMemberValidate.vm")
#if($operation.name == "CreateQueue" || $operation.name == "ListQueues" || $operation.name == "GetQueueUrl")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/common/ServiceClientOperationEndpointPrepareCommonBody.vm")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/common/UriRequestQueryParams.vm")
  return ${operation.name}Outcome(MakeRequest(request, endpointResolutionOutcome.GetResult(), Aws::Http::HttpMethod::HTTP_${operation.http.method}));
#else
  return ${operation.name}Outcome(MakeRequest(request.GetQueueUrl(), request, Aws::Http::HttpMethod::HTTP_${operation.http.method}));
#end
}

${operation.name}OutcomeCallable ${className}::${operation.name}Callable(const ${operation.request.shape.name}& request) const
{
  auto task = Aws::MakeShared< std::packaged_task< ${operation.name}Outcome() > >(ALLOCATION_TAG, [this, request](){ return this->${operation.name}(request); } );
  auto packagedFunction = [task]() { (*task)(); };
  m_executor->Submit(packagedFunction);
  return task->get_future();
}

void ${className}::${operation.name}Async(const ${operation.request.shape.name}& request,
      const ${operation.name}ResponseReceivedHandler& handler,
      const std::shared_ptr<const Aws::Client::AsyncCallerContext>& handlerContext) const
{
  m_executor->Submit( [this, request, handler, handlerContext]()
    {
      handler(this, request, ${operation.name}(request), handlerContext);
    } );
}

#end
