  Aws::StringStream ss;
#if($shape.members.entrySet().size() == 0)
  AWS_UNREFERENCED_PARAM(parentNode);
#end
#if(!$callFromRequestShape && $shape.xmlNamespace) 
##If requestShape has xmlNamespace field, then it has already added xml attribute before calling into this vm.
#if($shape.xmlNamespace.prefix)
#set($xmlnsKey = "xmlns:${shape.xmlNamespace.prefix}")
#else
#set($xmlnsKey = "xmlns")
#end
  parentNode.SetAttributeValue("${xmlnsKey}", "${shape.xmlNamespace.uri}");
#end
#foreach($entry in $shape.members.entrySet())
#if($entry.value.usedForPayload)
#set($spaces = '')
#set($memberName = $entry.key)
#set($serializationName = $memberName)
#set($member = $entry.value)
#if($member.locationName)
#set($serializationName = $member.locationName)
#end
#set($lowerCaseVarName = $CppViewHelper.computeVariableName($memberName))
#set($memberVarName = $CppViewHelper.computeMemberVariableName($memberName))
#set($varNameHasBeenSet = $CppViewHelper.computeVariableHasBeenSetName($memberName))
#if(!$member.required && $useRequiredField)
#set($spaces = ' ')
  if($varNameHasBeenSet)
  {
#end
#if($member.shape.enum)
#if($member.xmlAttribute)
  ${spaces}parentNode.SetAttributeValue("${serializationName}", ${member.shape.name}Mapper::GetNameFor${member.shape.name}(${memberVarName}));
#else
  ${spaces}XmlNode ${lowerCaseVarName}Node = parentNode.CreateChildElement("${serializationName}");
  ${spaces}${lowerCaseVarName}Node.SetText(${member.shape.name}Mapper::GetNameFor${member.shape.name}(${memberVarName}));
#end
#elseif($member.shape.boolean)
#if($member.xmlAttribute)
  ${spaces}ss << std::boolalpha << ${memberVarName};
  ${spaces}parentNode.SetAttributeValue("${serializationName}", ss.str());
#else
  ${spaces}XmlNode ${lowerCaseVarName}Node = parentNode.CreateChildElement("${serializationName}");
  ${spaces}ss << std::boolalpha << ${memberVarName};
  ${spaces}${lowerCaseVarName}Node.SetText(ss.str());
#end
  ${spaces}ss.str("");
#elseif($member.shape.primitive)
#if($member.xmlAttribute)
  ${spaces}ss << ${memberVarName};
  ${spaces}parentNode.SetAttributeValue("${serializationName}", ss.str());
#else
  ${spaces}XmlNode ${lowerCaseVarName}Node = parentNode.CreateChildElement("${serializationName}");
  ${spaces}ss << ${memberVarName};
  ${spaces}${lowerCaseVarName}Node.SetText(ss.str());
#end
  ${spaces}ss.str("");
#elseif($member.shape.string)
#if($member.xmlAttribute)
  ${spaces}parentNode.SetAttributeValue("${serializationName}", ${memberVarName});
#else
  ${spaces}XmlNode ${lowerCaseVarName}Node = parentNode.CreateChildElement("${serializationName}");
  ${spaces}${lowerCaseVarName}Node.SetText(${memberVarName});
#end
#elseif($member.shape.timeStamp)
#if($member.xmlAttribute)
  ${spaces}parentNode.SetAttributeValue("${serializationName}", ${memberVarName}.ToGmtString(DateFormat::ISO_8601));
#else
  ${spaces}XmlNode ${lowerCaseVarName}Node = parentNode.CreateChildElement("${serializationName}");
  ${spaces}${lowerCaseVarName}Node.SetText(${memberVarName}.ToGmtString(DateFormat::ISO_8601));
#end
#elseif($member.shape.blob)
#if($member.xmlAttribute)
  ${spaces}parentNode.SetAttributeValue("${serializationName}", HashingUtils::Base64Encode(${memberVarName}));
#else
  ${spaces}XmlNode ${lowerCaseVarName}Node = parentNode.CreateChildElement("${serializationName}");
  ${spaces}${lowerCaseVarName}Node.SetText(HashingUtils::Base64Encode(${memberVarName}));
#end
#elseif($member.shape.structure)
  ${spaces}XmlNode ${lowerCaseVarName}Node = parentNode.CreateChildElement("${serializationName}");
  ${spaces}${memberVarName}.AddToNode(${lowerCaseVarName}Node);
#elseif($member.shape.list)
#if($member.flattened)
  ${spaces}XmlNode ${lowerCaseVarName}ParentNode = parentNode.CreateChildElement("${memberName}");
#elseif(!$member.shape.flattened)
  ${spaces}XmlNode ${lowerCaseVarName}ParentNode = parentNode.CreateChildElement("${serializationName}");
#end
  ${spaces}for(const auto& item : $memberVarName)
  ${spaces}{
#if($member.locationName && $member.shape.flattened)
    ${spaces}XmlNode ${lowerCaseVarName}Node = parentNode.CreateChildElement("${member.locationName}");
#else
    ${spaces}XmlNode ${lowerCaseVarName}Node = ${lowerCaseVarName}ParentNode.CreateChildElement("${member.shape.listMember.shape.name}");
#end
#if($member.shape.listMember.shape.enum)
    ${spaces}${lowerCaseVarName}Node.SetText(${member.shape.listMember.shape.name}Mapper::GetNameFor${member.shape.listMember.shape.name}(item));
#elseif($member.shape.listMember.shape.boolean)
    ${spaces}ss << std::boolalpha << item;
    ${spaces}${lowerCaseVarName}Node.SetText(ss.str());
    ${spaces}ss.str("");
#elseif($member.shape.listMember.shape.primitive)
    ${spaces}ss << item;
    ${spaces}${lowerCaseVarName}Node.SetText(ss.str());
    ${spaces}ss.str("");
#elseif($member.shape.listMember.shape.string)
    ${spaces}${lowerCaseVarName}Node.SetText(item);
#elseif($member.shape.listMember.shape.timeStamp)
    ${spaces}${lowerCaseVarName}Node.SetText(item.ToGmtString(DateFormat::ISO_8601);
#elseif($member.shape.listMember.shape.blob)
    ${spaces}${lowerCaseVarName}Node.SetText(HashingUtils::Base64Encode(item));
#elseif($member.shape.listMember.shape.structure)
    ${spaces}item.AddToNode(${lowerCaseVarName}Node);
#end
  ${spaces}}
#end##End of member.shape is structure or list
#if(!$member.required && $useRequiredField)
  }

#end
#end##End if usedForPayload
#end##End foreach
