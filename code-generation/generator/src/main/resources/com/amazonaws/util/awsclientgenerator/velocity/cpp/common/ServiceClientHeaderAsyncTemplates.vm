
        /**
         * A template to submit a ${metadata.classNamePrefix}Client regular operation method for async execution.
         * This template method copies and queues the request into a thread executor and triggers associated callback when operation has finished.
        */
        template<typename RequestT, typename HandlerT, typename HandlerContextT, typename OperationFuncT>
        void SubmitAsync(OperationFuncT&& operationFunc, const RequestT& request, const HandlerT& handler, const HandlerContextT& context)
        {
            Aws::Client::MakeAsyncOperation(std::forward<OperationFuncT>(operationFunc), this, request, handler, context, m_executor.get());
        }

        /**
         * A template to submit a ${metadata.classNamePrefix}Client event stream enabled operation method for async execution.
         * This template method queues the original request object into a thread executor and triggers associated callback when operation has finished.
         * It is caller's responsibility to ensure the lifetime of the original request object for a duration of the async execution.
        */
        template<typename RequestT, typename HandlerT, typename HandlerContextT, typename OperationFuncT>
        void SubmitAsync(OperationFuncT&& operationFunc, /*note non-const ref*/ RequestT& request, const HandlerT& handler, const HandlerContextT& context)
        {
            Aws::Client::MakeAsyncStreamingOperation(std::forward<OperationFuncT>(operationFunc), this, request, handler, context, m_executor.get());
        }

        /**
         * A template to submit a ${metadata.classNamePrefix}Client regular operation method without arguments for async execution.
         * This template method submits a task into a thread executor and triggers associated callback when operation has finished.
        */
        template<typename HandlerT, typename HandlerContextT, typename OperationFuncT>
        void SubmitAsync(OperationFuncT&& operationFunc, const HandlerT& handler, const HandlerContextT& context)
        {
            Aws::Client::MakeAsyncOperation(std::forward<OperationFuncT>(operationFunc), this, handler, context, m_executor.get());
        }

        /**
         * A template to submit a ${metadata.classNamePrefix}Client regular operation method for async execution that returns a future<OperationOutcome> object.
         * This template method copies and queues the request into a thread executor and returns a future<OperationOutcome> object when operation has finished.
         */
        template<typename RequestT, typename OperationFuncT>
        auto SubmitCallable(OperationFuncT&& operationFunc, const RequestT& request) -> std::future<decltype((this->*operationFunc)(request))>
        {
            return Aws::Client::MakeCallableOperation(ALLOCATION_TAG, operationFunc, this, request, m_executor.get());
        }

        /**
         * A template to submit a ${metadata.classNamePrefix}Client event stream enabled operation method for async execution that returns a future<OperationOutcome> object.
         * This template method queues the original request into a thread executor and returns a future<OperationOutcome> object when operation has finished.
         * It is caller's responsibility to ensure the lifetime of the original request object for a duration of the async execution.
         */
        template<typename RequestT, typename OperationFuncT>
        auto SubmitCallable(OperationFuncT&& operationFunc, /*note non-const ref*/ RequestT& request) -> std::future<decltype((this->*operationFunc)(request))>
        {
            return Aws::Client::MakeCallableStreamingOperation(ALLOCATION_TAG, operationFunc, this, request, m_executor.get());
        }

        /**
         * A template to submit a ${metadata.classNamePrefix}Client regular operation without request argument for
         *   an async execution that returns a future<OperationOutcome> object.
         * This template method copies and queues the request into a thread executor and returns a future<OperationOutcome> object when operation has finished.
         */
        template<typename OperationFuncT>
        auto SubmitCallable(OperationFuncT&& operationFunc) -> std::future<decltype((this->*operationFunc)())>
        {
            return Aws::Client::MakeCallableOperation(ALLOCATION_TAG, operationFunc, this, m_executor.get());
        }
