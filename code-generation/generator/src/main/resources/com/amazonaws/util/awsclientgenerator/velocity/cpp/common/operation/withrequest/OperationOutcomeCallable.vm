#if($operation.result.shape.hasEventStreamMembers())
#set($constText = "")
#else
#set($constText = "const ")
#end
${operation.name}OutcomeCallable ${className}::${operation.name}Callable(${constText}${operation.request.shape.name}& request) const
{
#set($regularBlockingOperation = "&" + ${className} + "::" + ${operation.name})
#if($operation.name.endsWith("Async") || $operation.name.endsWith("Callable"))
  typedef ${operation.name}Outcome (${className}::*RegularBlockingOperation)(${constText}${operation.request.shape.name}&) const;
  RegularBlockingOperation regularBlockingOperation = &${className}::${operation.name};
#set($regularBlockingOperation = "regularBlockingOperation")
#end
#if($operation.result.shape.hasEventStreamMembers())
  return MakeCallableStreamingOperation(ALLOCATION_TAG, ${regularBlockingOperation}, this, request, m_executor.get());
#else
  return MakeCallableOperation(ALLOCATION_TAG, ${regularBlockingOperation}, this, request, m_executor.get());
#end
}
