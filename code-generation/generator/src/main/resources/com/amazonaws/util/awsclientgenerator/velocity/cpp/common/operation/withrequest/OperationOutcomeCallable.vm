#if($operation.result.shape.hasEventStreamMembers())
#set($constText = "")
#set($refText = "&")
#else
#set($constText = "const ")
#set($refText = "")
#end
#if(false)
##Failed attempt to replace duplicated functions bodies. Failed because of build time and binary size bloat due to too many template instantiations.
${operation.name}OutcomeCallable ${className}::${operation.name}Callable(${constText}${operation.request.shape.name}& request) const
{
#set($regularBlockingOperation = "&" + ${className} + "::" + ${operation.name})
#if($operation.name.endsWith("Async") || $operation.name.endsWith("Callable"))
  typedef ${operation.name}Outcome (${className}::*RegularBlockingOperation)(${constText}${operation.request.shape.name}&) const;
  RegularBlockingOperation regularBlockingOperation = &${className}::${operation.name};
#set($regularBlockingOperation = "regularBlockingOperation")
#end
#if($operation.result.shape.hasEventStreamMembers())
  return MakeCallableStreamingOperation(ALLOCATION_TAG, ${regularBlockingOperation}, this, request, m_executor.get());
#else
  return MakeCallableOperation(ALLOCATION_TAG, ${regularBlockingOperation}, this, request, m_executor.get());
#end
#else
##Original Existing duplicated function body
${operation.name}OutcomeCallable ${className}::${operation.name}Callable(${constText}${operation.request.shape.name}& request) const
{
  auto task = Aws::MakeShared< std::packaged_task< ${operation.name}Outcome() > >(ALLOCATION_TAG, [this, ${refText}request](){ return this->${operation.name}(request); } );
  auto packagedFunction = [task]() { (*task)(); };
  m_executor->Submit(packagedFunction);
  return task->get_future();
}
#end