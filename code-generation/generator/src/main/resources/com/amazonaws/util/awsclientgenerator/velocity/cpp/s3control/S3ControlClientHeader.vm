#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#set($metadata = $serviceModel.metadata)
#set($rootNamespace = $serviceModel.namespace)
#set($serviceNamespace = $metadata.namespace)
#set($className = "${metadata.classNamePrefix}Client")
#pragma once
\#include <aws/$metadata.projectName/${metadata.classNamePrefix}_EXPORTS.h>
\#include <aws/$metadata.projectName/${metadata.classNamePrefix}Endpoint.h>
\#include <aws/core/client/ClientConfiguration.h>
\#include <aws/core/client/AWSClient.h>
\#include <aws/core/auth/AWSAuthSigner.h>
\#include <aws/core/utils/xml/XmlSerializer.h>
\#include <aws/core/utils/DNS.h>
\#include <aws/$metadata.projectName/${metadata.classNamePrefix}ServiceClientModel.h>
#set($arnEndpointSupported = true)

namespace ${rootNamespace}
{
namespace ${metadata.namespace}
{
#if(!$serviceModel.endpointRules)
    // Get endpoint, signer region and signer service name after computing the endpoint.
    struct ComputeEndpointResult
    {
      ComputeEndpointResult(const Aws::String& iEndpointName = "", const Aws::String& iSignerRegion = "", const Aws::String& iSignerServiceName = "") :
        endpoint(iEndpointName), signerRegion(iSignerRegion), signerServiceName(iSignerServiceName) {}

      Aws::String endpoint;
      Aws::String signerRegion;
      Aws::String signerServiceName;
    };
    typedef Aws::Utils::Outcome<ComputeEndpointResult, Aws::Client::AWSError<${metadata.classNamePrefix}Errors>> ComputeEndpointOutcome;
#end

#if($serviceModel.documentation)
    /**
     * ${serviceModel.documentation}
     */
#end
#set($finalClass = " final")
#if($serviceModel.enableVirtualOperations)
#set($finalClass = "")
#end
    class ${CppViewHelper.computeExportValue($metadata.classNamePrefix)} ${className}$finalClass : public Aws::Client::AWSXMLClient
    {
    public:
        typedef Aws::Client::AWSXMLClient BASECLASS;
        static const char* SERVICE_NAME;
        static const char* ALLOCATION_TAG;

#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientHeaderConstructors.vm")

#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientHeaderOperations.vm")

        void OverrideEndpoint(const Aws::String& endpoint);
    private:
        void init(const Client::ClientConfiguration& clientConfiguration);
        void Load${metadata.classNamePrefix}SpecificConfig(const Aws::String& profile);
#if(!$serviceModel.endpointRules)
        /**
         * For operations without account ID or ARN as parameters, e.g. CreateBucket, ListRegionalBuckets. Possible endpoints:
         * - s3-control[.dualstack].{region}.amazonaws.com
         * - s3-outposts.{region}.amazonaws.com
         * @param hasOutpostId: Use s3-outposts as service name for both endpoint and signer if true.
         */
        ComputeEndpointOutcome ComputeEndpointString(bool hasOutpostId = false) const;
        /**
         * For operations without account ID, but with ARN as parameters. e.g. GetBucket. Possible endpoints:
         * - {accountId}.s3-control[.dualstack].{region}.amazonaws.com
         * - s3-outposts.{region}.amazonaws.com
         * @param name: accesspoint name (ARN) or bucket name (ARN).
         * @param hasOutpostId: Use s3-outposts as service name to sign the request if true.
         * @param uriPathPrefix: Path prefix of the first resource in the uri.
         */
        ComputeEndpointOutcome ComputeEndpointString(const Aws::String& name, bool hasOutpostId, const Aws::String& uriPathPrefix) const;

        Aws::String m_baseUri;
        Aws::String m_scheme;
        bool m_enableHostPrefixInjection = false;
        Aws::String m_configScheme;
#end##-#if(!$serviceModel.endpointRules)
        std::shared_ptr<Utils::Threading::Executor> m_executor;
#if(!$serviceModel.endpointRules)
        bool m_useDualStack = false;
        bool m_useArnRegion = false;
        bool m_useCustomEndpoint = false;
#end
#if($metadata.hasEndpointDiscoveryTrait)
        mutable Aws::Utils::ConcurrentCache<Aws::String, Aws::String> m_endpointsCache;
        bool m_enableEndpointDiscovery = false;
#end
#if($serviceModel.endpointRules)
        std::shared_ptr<Endpoint::${metadata.classNamePrefix}EndpointProvider> m_endpointProvider;
#end
    };

  } // namespace ${metadata.namespace}
} // namespace ${rootNamespace}
