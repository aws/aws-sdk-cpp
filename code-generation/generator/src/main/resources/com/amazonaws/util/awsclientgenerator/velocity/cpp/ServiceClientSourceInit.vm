#if($signPayloadsOptional)
#set($signPayloads = ", Aws::Client::AWSAuthV4Signer::PayloadSigningPolicy signPayloads")
#set($signPayloadsParam = ", signPayloads")
#else
#set($signPayloads = "")
#set($signPayloadsParam = "")
#end
#if($metadata.signatureVersion.equals("s3") || $metadata.signatureVersion.equals("s3v4"))
#if(!$signPayloadsOptional)
#set($signPayloadsParam = ", Aws::Client::AWSAuthV4Signer::PayloadSigningPolicy::RequestDependent")
#end
#set($doubleEncodeValue = ", false")
#else
#set($doubleEncodeValue = "")
#end
#if($virtualAddressingSupported)
#set($virtualAddressing = ", bool useVirtualAddressing")
#set($virtualAddressingInit = ", m_useVirtualAddressing(useVirtualAddressing)")
#else
#set($virtualAddressing = "")
#set($virtualAddressingInit = "")
#end
#if(!$USEast1RegionalEndpointArgString)
#set($USEast1RegionalEndpointArgString = "")
#end
#if(!$USEast1RegionalEndpointInitString)
#set($USEast1RegionalEndpointInitString = "")
#end
#if(!$ForRegionExtraArgsString)
#set($ForRegionExtraArgsString = "")
#end
#if($metadata.hasEndpointDiscoveryTrait)
#set($AdditionalServiceSpecificConfigLoadString = "Load${metadata.classNamePrefix}SpecificConfig(config);")
#end
#set($clientConfigurationNamespace = "Client")
#set($defaultCredentialsProviderChainParam = "Aws::MakeShared<DefaultAWSCredentialsProviderChain>(ALLOCATION_TAG)")
#set($simpleCredentialsProviderParam = "Aws::MakeShared<SimpleAWSCredentialsProvider>(ALLOCATION_TAG, credentials)")
#set($hasEventStreamInputOperation = false)
#foreach($operation in $serviceModel.operations)
#if($operation.request.shape.hasEventStreamMembers())
    #set($hasEventStreamInputOperation = true)
#end
#end
#set($signerToMake = "AWSAuthV4Signer")
#if($serviceModel.hasOnlyBearerAuth())
    #set($signerToMake = "Aws::Auth::BearerTokenAuthSignerProvider")
#elseif($hasEventStreamInputOperation || $multiRegionAccessPointSupported)
    #set($signerToMake = "Aws::Auth::DefaultAuthSignerProvider")
#end

#if($serviceModel.hasOnlyBearerAuth())
    ${className}::${className}(const ${signerToMake}& bearerTokenProvider, const ${clientConfigurationNamespace}::ClientConfiguration& clientConfiguration${signPayloads}${virtualAddressing}${USEast1RegionalEndpointArgString}) :
  BASECLASS(clientConfiguration,
    Aws::MakeShared<${signerToMake}>(ALLOCATION_TAG, bearerTokenProvider),
    Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG)),
    m_executor(clientConfiguration.executor)${virtualAddressingInit}${USEast1RegionalEndpointInitString}
{
  init(clientConfiguration);
}

#else##!#if($serviceModel.hasOnlyBearerAuth())
${className}::${className}(const ${clientConfigurationNamespace}::ClientConfiguration& clientConfiguration${signPayloads}${virtualAddressing}${USEast1RegionalEndpointArgString}) :
  BASECLASS(clientConfiguration,
    Aws::MakeShared<${signerToMake}>(ALLOCATION_TAG, ${defaultCredentialsProviderChainParam},
        SERVICE_NAME, Aws::Region::ComputeSignerRegion(clientConfiguration.region)${signPayloadsParam}${doubleEncodeValue}),
    Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG)),
    m_executor(clientConfiguration.executor)${virtualAddressingInit}${USEast1RegionalEndpointInitString}
{
  init(clientConfiguration);
}

${className}::${className}(const AWSCredentials& credentials, const ${clientConfigurationNamespace}::ClientConfiguration& clientConfiguration${signPayloads}${virtualAddressing}${USEast1RegionalEndpointArgString}) :
  BASECLASS(clientConfiguration,
    Aws::MakeShared<${signerToMake}>(ALLOCATION_TAG, ${simpleCredentialsProviderParam},
         SERVICE_NAME, Aws::Region::ComputeSignerRegion(clientConfiguration.region)${signPayloadsParam}${doubleEncodeValue}),
    Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG)),
    m_executor(clientConfiguration.executor)${virtualAddressingInit}${USEast1RegionalEndpointInitString}
{
  init(clientConfiguration);
}

${className}::${className}(const std::shared_ptr<AWSCredentialsProvider>& credentialsProvider,
  const ${clientConfigurationNamespace}::ClientConfiguration& clientConfiguration${signPayloads}${virtualAddressing}${USEast1RegionalEndpointArgString}) :
  BASECLASS(clientConfiguration,
    Aws::MakeShared<${signerToMake}>(ALLOCATION_TAG, credentialsProvider,
         SERVICE_NAME, Aws::Region::ComputeSignerRegion(clientConfiguration.region)${signPayloadsParam}${doubleEncodeValue}),
    Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG)),
    m_executor(clientConfiguration.executor)${virtualAddressingInit}${USEast1RegionalEndpointInitString}
{
  init(clientConfiguration);
}
#end##if($serviceModel.hasOnlyBearerAuth())

#if($metadata.standalone || $metadata.apigateway)
${className}::${className}(const std::shared_ptr<Aws::Auth::AWSAuthSignerProvider>& signerProvider,
  const ${clientConfigurationNamespace}::ClientConfiguration& clientConfiguration${signPayloads}${virtualAddressing}) :
  BASECLASS(clientConfiguration, signerProvider,
    Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG)),
    m_executor(clientConfiguration.executor)${virtualAddressingInit}
{
  init(clientConfiguration);
}

#end
${className}::~${className}()
{
}

void ${className}::init(const ${clientConfigurationNamespace}::ClientConfiguration& config)
{
  SetServiceClientName("${metadata.serviceId}");
#if($AdditionalServiceSpecificConfigLoadString)
  ${AdditionalServiceSpecificConfigLoadString}
#end
  m_configScheme = SchemeMapper::ToString(config.scheme);
#if($metadata.hasPreSignedUrl)
  m_useDualStack = config.useDualStack;
#end
#if($virtualAddressingSupported || $arnEndpointSupported || $vpcEndpointSupported || $metadata.hasEndpointTrait)
  m_scheme = m_configScheme;
#if($arnEndpointSupported)
  m_useDualStack = config.useDualStack;
#end
  if (config.endpointOverride.empty())
  {
#if($arnEndpointSupported || $vpcEndpointSupported || $customEndpointUsed)
      m_useCustomEndpoint = false;
#end
      m_baseUri = ${metadata.classNamePrefix}Endpoint::ForRegion(config.region, config.useDualStack${ForRegionExtraArgsString});
  }
  else
  {
#if($arnEndpointSupported || $vpcEndpointSupported || $customEndpointUsed)
      m_useCustomEndpoint = true;
#end
      OverrideEndpoint(config.endpointOverride);
  }
#else
  if (config.endpointOverride.empty())
  {
      m_uri = m_configScheme + "://" + ${metadata.classNamePrefix}Endpoint::ForRegion(config.region, config.useDualStack);
#if($customEndpointUsed)
      m_useCustomEndpoint = false;
#end
  }
  else
  {
      OverrideEndpoint(config.endpointOverride);
#if($arnEndpointSupported || $vpcEndpointSupported || $customEndpointUsed)
      m_useCustomEndpoint = true;
#end
  }
#end
#if($metadata.hasEndpointTrait)
  m_enableHostPrefixInjection = config.enableHostPrefixInjection;
#end
}
#if($metadata.hasEndpointDiscoveryTrait)

void ${className}::Load${metadata.classNamePrefix}SpecificConfig(const Aws::Client::ClientConfiguration& clientConfiguration)
{
  if (!clientConfiguration.endpointOverride.empty())
  {
    m_enableEndpointDiscovery = false;
  }
  else if (clientConfiguration.enableEndpointDiscovery)
  {
    m_enableEndpointDiscovery = clientConfiguration.enableEndpointDiscovery.value();
  }
  else
  {
#if($metadata.requireEndpointDiscovery)
    m_enableEndpointDiscovery = true;
#else
    m_enableEndpointDiscovery = false;
#end

    Aws::String enableEndpointDiscovery = Aws::Environment::GetEnv("AWS_ENABLE_ENDPOINT_DISCOVERY");
    if (enableEndpointDiscovery.empty())
    {
      enableEndpointDiscovery = Aws::Config::GetCachedConfigValue(clientConfiguration.profileName, "endpoint_discovery_enabled");
    }

    if (enableEndpointDiscovery == "true")
    {
      m_enableEndpointDiscovery = true;
    }
    else if (enableEndpointDiscovery == "false")
    {
      m_enableEndpointDiscovery = false;
    }
    else if (!enableEndpointDiscovery.empty())
    {
      AWS_LOGSTREAM_WARN("${className}", R"(Using the SDK default configuration for Endpoint Discovery. )"
        R"(Make sure your environment variable "AWS_ENABLE_ENDPOINT_DISCOVERY" or )"
        R"(your config file's variable "endpoint_discovery_enabled" are explicitly set to "true" or "false" (case-sensitive) or not set at all.)");
    }
  }
}
#end

void ${className}::OverrideEndpoint(const Aws::String& endpoint)
{
#if($virtualAddressingSupported || $arnEndpointSupported || $metadata.hasEndpointTrait)
  if (endpoint.compare(0, 7, "http://") == 0)
  {
      m_scheme = "http";
      m_baseUri = endpoint.substr(7);
  }
  else if (endpoint.compare(0, 8, "https://") == 0)
  {
      m_scheme = "https";
      m_baseUri = endpoint.substr(8);
  }
  else
  {
      m_scheme = m_configScheme;
      m_baseUri = endpoint;
  }
#else
  if (endpoint.compare(0, 7, "http://") == 0 || endpoint.compare(0, 8, "https://") == 0)
  {
      m_uri = endpoint;
  }
  else
  {
      m_uri = m_configScheme + "://" + endpoint;
  }
#end
#if($metadata.hasEndpointDiscoveryTrait)
  m_enableEndpointDiscovery = false;
#end
}
