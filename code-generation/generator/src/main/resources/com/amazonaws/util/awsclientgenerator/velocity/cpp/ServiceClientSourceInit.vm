#if($signPayloadsOptional)
#set($signPayloads = ", Aws::Client::AWSAuthV4Signer::PayloadSigningPolicy signPayloads")
#set($signPayloadsParam = ", signPayloads")
#else
#set($signPayloads = "")
#set($signPayloadsParam = "")
#end
#if($metadata.signatureVersion.equals("s3") || $metadata.signatureVersion.equals("s3v4"))
#if(!$signPayloadsOptional)
#set($signPayloadsParam = ", Aws::Client::AWSAuthV4Signer::PayloadSigningPolicy::RequestDependent")
#end
#set($doubleEncodeValue = ", false")
#else
#set($doubleEncodeValue = "")
#end
#if($virtualAddressingSupported)
#set($virtualAddressing = ", bool useVirtualAddressing")
#set($virtualAddressingInit = ", m_useVirtualAddressing(useVirtualAddressing)")
#else
#set($virtualAddressing = "")
#set($virtualAddressingInit = "")
#end
#if(!$USEast1RegionalEndpointArgString)
#set($USEast1RegionalEndpointArgString = "")
#end
#if(!$USEast1RegionalEndpointInitString)
#set($USEast1RegionalEndpointInitString = "")
#end
#if(!$ForRegionExtraArgsString)
#set($ForRegionExtraArgsString = "")
#end

#if($hasEventStreamInputOperation)
${className}::${className}(const Client::ClientConfiguration& clientConfiguration${signPayloads}${virtualAddressing}${USEast1RegionalEndpointArgString}) :
  BASECLASS(clientConfiguration,
    Aws::MakeShared<Aws::Auth::DefaultAuthSignerProvider>(ALLOCATION_TAG, Aws::MakeShared<DefaultAWSCredentialsProviderChain>(ALLOCATION_TAG),
        SERVICE_NAME, Aws::Region::ComputeSignerRegion(clientConfiguration.region)${signPayloadsParam}${doubleEncodeValue}),
    Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG)),
    m_executor(clientConfiguration.executor)${virtualAddressingInit}${USEast1RegionalEndpointInitString}
{
  init(clientConfiguration);
}

${className}::${className}(const AWSCredentials& credentials, const Client::ClientConfiguration& clientConfiguration${signPayloads}${virtualAddressing}${USEast1RegionalEndpointArgString}) :
  BASECLASS(clientConfiguration,
    Aws::MakeShared<Aws::Auth::DefaultAuthSignerProvider>(ALLOCATION_TAG, Aws::MakeShared<SimpleAWSCredentialsProvider>(ALLOCATION_TAG, credentials),
         SERVICE_NAME, Aws::Region::ComputeSignerRegion(clientConfiguration.region)${signPayloadsParam}${doubleEncodeValue}),
    Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG)),
    m_executor(clientConfiguration.executor)${virtualAddressingInit}${USEast1RegionalEndpointInitString}
{
  init(clientConfiguration);
}

${className}::${className}(const std::shared_ptr<AWSCredentialsProvider>& credentialsProvider,
  const Client::ClientConfiguration& clientConfiguration${signPayloads}${virtualAddressing}${USEast1RegionalEndpointArgString}) :
  BASECLASS(clientConfiguration,
    Aws::MakeShared<Aws::Auth::DefaultAuthSignerProvider>(ALLOCATION_TAG, credentialsProvider,
         SERVICE_NAME, Aws::Region::ComputeSignerRegion(clientConfiguration.region)${signPayloadsParam}${doubleEncodeValue}),
    Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG)),
    m_executor(clientConfiguration.executor)${virtualAddressingInit}${USEast1RegionalEndpointInitString}
{
  init(clientConfiguration);
}
#else
${className}::${className}(const Client::ClientConfiguration& clientConfiguration${signPayloads}${virtualAddressing}${USEast1RegionalEndpointArgString}) :
  BASECLASS(clientConfiguration,
    Aws::MakeShared<AWSAuthV4Signer>(ALLOCATION_TAG, Aws::MakeShared<DefaultAWSCredentialsProviderChain>(ALLOCATION_TAG),
        SERVICE_NAME, Aws::Region::ComputeSignerRegion(clientConfiguration.region)${signPayloadsParam}${doubleEncodeValue}),
    Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG)),
    m_executor(clientConfiguration.executor)${virtualAddressingInit}${USEast1RegionalEndpointInitString}
{
  init(clientConfiguration);
}

${className}::${className}(const AWSCredentials& credentials, const Client::ClientConfiguration& clientConfiguration${signPayloads}${virtualAddressing}${USEast1RegionalEndpointArgString}) :
  BASECLASS(clientConfiguration,
    Aws::MakeShared<AWSAuthV4Signer>(ALLOCATION_TAG, Aws::MakeShared<SimpleAWSCredentialsProvider>(ALLOCATION_TAG, credentials),
         SERVICE_NAME, Aws::Region::ComputeSignerRegion(clientConfiguration.region)${signPayloadsParam}${doubleEncodeValue}),
    Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG)),
    m_executor(clientConfiguration.executor)${virtualAddressingInit}${USEast1RegionalEndpointInitString}
{
  init(clientConfiguration);
}

${className}::${className}(const std::shared_ptr<AWSCredentialsProvider>& credentialsProvider,
  const Client::ClientConfiguration& clientConfiguration${signPayloads}${virtualAddressing}${USEast1RegionalEndpointArgString}) :
  BASECLASS(clientConfiguration,
    Aws::MakeShared<AWSAuthV4Signer>(ALLOCATION_TAG, credentialsProvider,
         SERVICE_NAME, Aws::Region::ComputeSignerRegion(clientConfiguration.region)${signPayloadsParam}${doubleEncodeValue}),
    Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG)),
    m_executor(clientConfiguration.executor)${virtualAddressingInit}${USEast1RegionalEndpointInitString}
{
  init(clientConfiguration);
}
#end

#if($metadata.standalone || $metadata.apigateway)
${className}::${className}(const std::shared_ptr<Aws::Auth::AWSAuthSignerProvider>& signerProvider,
  const Client::ClientConfiguration& clientConfiguration${signPayloads}${virtualAddressing}) :
  BASECLASS(clientConfiguration, signerProvider,
    Aws::MakeShared<${metadata.classNamePrefix}ErrorMarshaller>(ALLOCATION_TAG)),
    m_executor(clientConfiguration.executor)${virtualAddressingInit}
{
  init(clientConfiguration);
}

#end
${className}::~${className}()
{
}

void ${className}::init(const ClientConfiguration& config)
{
  SetServiceClientName("${metadata.serviceId}");
#if($AdditionalServiceSpecificConfigLoadString)
  ${AdditionalServiceSpecificConfigLoadString}
#end
  m_configScheme = SchemeMapper::ToString(config.scheme);
#if($metadata.hasPreSignedUrl)
  m_useDualStack = config.useDualStack;
#end
#if($virtualAddressingSupported || $arnEndpointSupported || $vpcEndpointSupported || $metadata.hasEndpointTrait)
  m_scheme = m_configScheme;
#if($arnEndpointSupported)
  m_useDualStack = config.useDualStack;
#end
  if (config.endpointOverride.empty())
  {
#if($arnEndpointSupported || $vpcEndpointSupported)
      m_useCustomEndpoint = false;
#end
      m_baseUri = ${metadata.classNamePrefix}Endpoint::ForRegion(config.region, config.useDualStack${ForRegionExtraArgsString});
  }
  else
  {
#if($arnEndpointSupported || $vpcEndpointSupported)
      m_useCustomEndpoint = true;
#end
      OverrideEndpoint(config.endpointOverride);
  }
#else
  if (config.endpointOverride.empty())
  {
      m_uri = m_configScheme + "://" + ${metadata.classNamePrefix}Endpoint::ForRegion(config.region, config.useDualStack);
  }
  else
  {
      OverrideEndpoint(config.endpointOverride);
  }
#end
#if($metadata.hasEndpointTrait)
  m_enableHostPrefixInjection = config.enableHostPrefixInjection;
#end
#if($metadata.hasEndpointDiscoveryTrait)
  if (!config.endpointOverride.empty())
  {
    m_enableEndpointDiscovery = false;
  }
  else
  {
    m_enableEndpointDiscovery = config.enableEndpointDiscovery;
  }
#end
}

void ${className}::OverrideEndpoint(const Aws::String& endpoint)
{
#if($virtualAddressingSupported || $arnEndpointSupported || $metadata.hasEndpointTrait)
  if (endpoint.compare(0, 7, "http://") == 0)
  {
      m_scheme = "http";
      m_baseUri = endpoint.substr(7);
  }
  else if (endpoint.compare(0, 8, "https://") == 0)
  {
      m_scheme = "https";
      m_baseUri = endpoint.substr(8);
  }
  else
  {
      m_scheme = m_configScheme;
      m_baseUri = endpoint;
  }
#else
  if (endpoint.compare(0, 7, "http://") == 0 || endpoint.compare(0, 8, "https://") == 0)
  {
      m_uri = endpoint;
  }
  else
  {
      m_uri = m_configScheme + "://" + endpoint;
  }
#end
#if($metadata.hasEndpointDiscoveryTrait)
  m_enableEndpointDiscovery = false;
#end
}
