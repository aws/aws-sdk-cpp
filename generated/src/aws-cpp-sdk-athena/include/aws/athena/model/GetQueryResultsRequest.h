/**
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0.
 */

#pragma once
#include <aws/athena/AthenaRequest.h>
#include <aws/athena/Athena_EXPORTS.h>
#include <aws/athena/model/QueryResultType.h>
#include <aws/core/utils/memory/stl/AWSString.h>

#include <utility>

namespace Aws {
namespace Athena {
namespace Model {

/**
 */
class GetQueryResultsRequest : public AthenaRequest {
 public:
  AWS_ATHENA_API GetQueryResultsRequest() = default;

  // Service request name is the Operation name which will send this request out,
  // each operation should has unique request name, so that we can get operation's name from this request.
  // Note: this is not true for response, multiple operations may have the same response name,
  // so we can not get operation's name from response.
  inline virtual const char* GetServiceRequestName() const override { return "GetQueryResults"; }

  AWS_ATHENA_API Aws::String SerializePayload() const override;

  AWS_ATHENA_API Aws::Http::HeaderValueCollection GetRequestSpecificHeaders() const override;

  ///@{
  /**
   * <p>The unique ID of the query execution.</p>
   */
  inline const Aws::String& GetQueryExecutionId() const { return m_queryExecutionId; }
  inline bool QueryExecutionIdHasBeenSet() const { return m_queryExecutionIdHasBeenSet; }
  template <typename QueryExecutionIdT = Aws::String>
  void SetQueryExecutionId(QueryExecutionIdT&& value) {
    m_queryExecutionIdHasBeenSet = true;
    m_queryExecutionId = std::forward<QueryExecutionIdT>(value);
  }
  template <typename QueryExecutionIdT = Aws::String>
  GetQueryResultsRequest& WithQueryExecutionId(QueryExecutionIdT&& value) {
    SetQueryExecutionId(std::forward<QueryExecutionIdT>(value));
    return *this;
  }
  ///@}

  ///@{
  /**
   * <p>A token generated by the Athena service that specifies where to continue
   * pagination if a previous request was truncated. To obtain the next set of pages,
   * pass in the <code>NextToken</code> from the response object of the previous page
   * call.</p>
   */
  inline const Aws::String& GetNextToken() const { return m_nextToken; }
  inline bool NextTokenHasBeenSet() const { return m_nextTokenHasBeenSet; }
  template <typename NextTokenT = Aws::String>
  void SetNextToken(NextTokenT&& value) {
    m_nextTokenHasBeenSet = true;
    m_nextToken = std::forward<NextTokenT>(value);
  }
  template <typename NextTokenT = Aws::String>
  GetQueryResultsRequest& WithNextToken(NextTokenT&& value) {
    SetNextToken(std::forward<NextTokenT>(value));
    return *this;
  }
  ///@}

  ///@{
  /**
   * <p>The maximum number of results (rows) to return in this request.</p>
   */
  inline int GetMaxResults() const { return m_maxResults; }
  inline bool MaxResultsHasBeenSet() const { return m_maxResultsHasBeenSet; }
  inline void SetMaxResults(int value) {
    m_maxResultsHasBeenSet = true;
    m_maxResults = value;
  }
  inline GetQueryResultsRequest& WithMaxResults(int value) {
    SetMaxResults(value);
    return *this;
  }
  ///@}

  ///@{
  /**
   * <p> When you set this to <code>DATA_ROWS</code> or empty,
   * <code>GetQueryResults</code> returns the query results in rows. If set to
   * <code>DATA_MANIFEST</code>, it returns the manifest file in rows. Only the query
   * types <code>CREATE TABLE AS SELECT</code>, <code>UNLOAD</code>, and
   * <code>INSERT</code> can generate a manifest file. If you use
   * <code>DATA_MANIFEST</code> for other query types, the query will fail. </p>
   */
  inline QueryResultType GetQueryResultType() const { return m_queryResultType; }
  inline bool QueryResultTypeHasBeenSet() const { return m_queryResultTypeHasBeenSet; }
  inline void SetQueryResultType(QueryResultType value) {
    m_queryResultTypeHasBeenSet = true;
    m_queryResultType = value;
  }
  inline GetQueryResultsRequest& WithQueryResultType(QueryResultType value) {
    SetQueryResultType(value);
    return *this;
  }
  ///@}
 private:
  Aws::String m_queryExecutionId;
  bool m_queryExecutionIdHasBeenSet = false;

  Aws::String m_nextToken;
  bool m_nextTokenHasBeenSet = false;

  int m_maxResults{0};
  bool m_maxResultsHasBeenSet = false;

  QueryResultType m_queryResultType{QueryResultType::NOT_SET};
  bool m_queryResultTypeHasBeenSet = false;
};

}  // namespace Model
}  // namespace Athena
}  // namespace Aws
