/**
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0.
 */

#pragma once
#include <aws/core/utils/memory/stl/AWSString.h>
#include <aws/mediaconnect/MediaConnect_EXPORTS.h>
#include <aws/mediaconnect/model/InstanceState.h>

#include <utility>

namespace Aws {
namespace Utils {
namespace Json {
class JsonValue;
class JsonView;
}  // namespace Json
}  // namespace Utils
namespace MediaConnect {
namespace Model {

/**
 * <p> A summary of an instance. </p><p><h3>See Also:</h3>   <a
 * href="http://docs.aws.amazon.com/goto/WebAPI/mediaconnect-2018-11-14/ListedGatewayInstance">AWS
 * API Reference</a></p>
 */
class ListedGatewayInstance {
 public:
  AWS_MEDIACONNECT_API ListedGatewayInstance() = default;
  AWS_MEDIACONNECT_API ListedGatewayInstance(Aws::Utils::Json::JsonView jsonValue);
  AWS_MEDIACONNECT_API ListedGatewayInstance& operator=(Aws::Utils::Json::JsonView jsonValue);
  AWS_MEDIACONNECT_API Aws::Utils::Json::JsonValue Jsonize() const;

  ///@{
  /**
   * <p> The Amazon Resource Name (ARN) of the gateway.</p>
   */
  inline const Aws::String& GetGatewayArn() const { return m_gatewayArn; }
  inline bool GatewayArnHasBeenSet() const { return m_gatewayArnHasBeenSet; }
  template <typename GatewayArnT = Aws::String>
  void SetGatewayArn(GatewayArnT&& value) {
    m_gatewayArnHasBeenSet = true;
    m_gatewayArn = std::forward<GatewayArnT>(value);
  }
  template <typename GatewayArnT = Aws::String>
  ListedGatewayInstance& WithGatewayArn(GatewayArnT&& value) {
    SetGatewayArn(std::forward<GatewayArnT>(value));
    return *this;
  }
  ///@}

  ///@{
  /**
   * <p> The Amazon Resource Name (ARN) of the instance.</p>
   */
  inline const Aws::String& GetGatewayInstanceArn() const { return m_gatewayInstanceArn; }
  inline bool GatewayInstanceArnHasBeenSet() const { return m_gatewayInstanceArnHasBeenSet; }
  template <typename GatewayInstanceArnT = Aws::String>
  void SetGatewayInstanceArn(GatewayInstanceArnT&& value) {
    m_gatewayInstanceArnHasBeenSet = true;
    m_gatewayInstanceArn = std::forward<GatewayInstanceArnT>(value);
  }
  template <typename GatewayInstanceArnT = Aws::String>
  ListedGatewayInstance& WithGatewayInstanceArn(GatewayInstanceArnT&& value) {
    SetGatewayInstanceArn(std::forward<GatewayInstanceArnT>(value));
    return *this;
  }
  ///@}

  ///@{
  /**
   * <p> The managed instance ID generated by the SSM install. This will begin with
   * "mi-".</p>
   */
  inline const Aws::String& GetInstanceId() const { return m_instanceId; }
  inline bool InstanceIdHasBeenSet() const { return m_instanceIdHasBeenSet; }
  template <typename InstanceIdT = Aws::String>
  void SetInstanceId(InstanceIdT&& value) {
    m_instanceIdHasBeenSet = true;
    m_instanceId = std::forward<InstanceIdT>(value);
  }
  template <typename InstanceIdT = Aws::String>
  ListedGatewayInstance& WithInstanceId(InstanceIdT&& value) {
    SetInstanceId(std::forward<InstanceIdT>(value));
    return *this;
  }
  ///@}

  ///@{
  /**
   * <p> The status of the instance.</p>
   */
  inline InstanceState GetInstanceState() const { return m_instanceState; }
  inline bool InstanceStateHasBeenSet() const { return m_instanceStateHasBeenSet; }
  inline void SetInstanceState(InstanceState value) {
    m_instanceStateHasBeenSet = true;
    m_instanceState = value;
  }
  inline ListedGatewayInstance& WithInstanceState(InstanceState value) {
    SetInstanceState(value);
    return *this;
  }
  ///@}
 private:
  Aws::String m_gatewayArn;
  bool m_gatewayArnHasBeenSet = false;

  Aws::String m_gatewayInstanceArn;
  bool m_gatewayInstanceArnHasBeenSet = false;

  Aws::String m_instanceId;
  bool m_instanceIdHasBeenSet = false;

  InstanceState m_instanceState{InstanceState::NOT_SET};
  bool m_instanceStateHasBeenSet = false;
};

}  // namespace Model
}  // namespace MediaConnect
}  // namespace Aws
