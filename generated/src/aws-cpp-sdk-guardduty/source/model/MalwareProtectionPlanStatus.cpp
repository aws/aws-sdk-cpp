/**
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0.
 */

#include <aws/core/Globals.h>
#include <aws/core/utils/EnumParseOverflowContainer.h>
#include <aws/core/utils/HashingUtils.h>
#include <aws/guardduty/model/MalwareProtectionPlanStatus.h>

using namespace Aws::Utils;

namespace Aws {
namespace GuardDuty {
namespace Model {
namespace MalwareProtectionPlanStatusMapper {

static const int ACTIVE_HASH = HashingUtils::HashString("ACTIVE");
static const int WARNING_HASH = HashingUtils::HashString("WARNING");
static const int ERROR__HASH = HashingUtils::HashString("ERROR");

MalwareProtectionPlanStatus GetMalwareProtectionPlanStatusForName(const Aws::String& name) {
  int hashCode = HashingUtils::HashString(name.c_str());
  if (hashCode == ACTIVE_HASH) {
    return MalwareProtectionPlanStatus::ACTIVE;
  } else if (hashCode == WARNING_HASH) {
    return MalwareProtectionPlanStatus::WARNING;
  } else if (hashCode == ERROR__HASH) {
    return MalwareProtectionPlanStatus::ERROR_;
  }
  EnumParseOverflowContainer* overflowContainer = Aws::GetEnumOverflowContainer();
  if (overflowContainer) {
    overflowContainer->StoreOverflow(hashCode, name);
    return static_cast<MalwareProtectionPlanStatus>(hashCode);
  }

  return MalwareProtectionPlanStatus::NOT_SET;
}

Aws::String GetNameForMalwareProtectionPlanStatus(MalwareProtectionPlanStatus enumValue) {
  switch (enumValue) {
    case MalwareProtectionPlanStatus::NOT_SET:
      return {};
    case MalwareProtectionPlanStatus::ACTIVE:
      return "ACTIVE";
    case MalwareProtectionPlanStatus::WARNING:
      return "WARNING";
    case MalwareProtectionPlanStatus::ERROR_:
      return "ERROR";
    default:
      EnumParseOverflowContainer* overflowContainer = Aws::GetEnumOverflowContainer();
      if (overflowContainer) {
        return overflowContainer->RetrieveOverflow(static_cast<int>(enumValue));
      }

      return {};
  }
}

}  // namespace MalwareProtectionPlanStatusMapper
}  // namespace Model
}  // namespace GuardDuty
}  // namespace Aws
